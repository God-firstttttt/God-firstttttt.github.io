<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ajax第一天</title>
    <link href="/2021/02/04/Ajax%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2021/02/04/Ajax%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第一天"><a href="#Ajax第一天" class="headerlink" title="Ajax第一天"></a>Ajax第一天</h1><h2 id="一、客户端与服务器"><a href="#一、客户端与服务器" class="headerlink" title="一、客户端与服务器"></a>一、客户端与服务器</h2><h3 id="1、上网的目的"><a href="#1、上网的目的" class="headerlink" title="1、上网的目的"></a>1、上网的目的</h3><p>通过互联网的形式来 <strong>获取和消费资源</strong></p><h3 id="2、服务器"><a href="#2、服务器" class="headerlink" title="2、服务器"></a>2、服务器</h3><p>上网过程中，负责 <strong>存放和对外提供资源</strong> 的电脑，叫做服务器</p><h3 id="3、客户端"><a href="#3、客户端" class="headerlink" title="3、客户端"></a>3、客户端</h3><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><h2 id="二、URL地址的概念-amp-组成"><a href="#二、URL地址的概念-amp-组成" class="headerlink" title="二、URL地址的概念&amp;组成"></a>二、URL地址的概念&amp;组成</h2><h3 id="1、URL的概念"><a href="#1、URL的概念" class="headerlink" title="1、URL的概念"></a>1、URL的概念</h3><p>URL（全称是 <code>UniformResourceLocator</code>） 中文叫 <strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源</p><h3 id="2、URL的组成"><a href="#2、URL的组成" class="headerlink" title="2、URL的组成"></a>2、URL的组成</h3><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\URL组成.png" alt="URL组成"></p><h3 id="3、复习"><a href="#3、复习" class="headerlink" title="3、复习"></a>3、复习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">url路径的获取：location.path (<span class="hljs-regexp">/home/i</span>ndex.html)<br><br>  url中的查询参数：location.search (?uname=tom&amp;age=<span class="hljs-number">20</span>)<br><br>  url中的锚点：location.hash (#abc)<br><br></code></pre></td></tr></table></figure><p>   BOM中的三大对象：location（操作地址栏） history（浏览器历史） Navigation(获取浏览器对象)</p><h2 id="三、客户端与服务器通讯过程"><a href="#三、客户端与服务器通讯过程" class="headerlink" title="三、客户端与服务器通讯过程"></a>三、客户端与服务器通讯过程</h2><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\客户端与服务器通讯过程.png" alt="客户端与服务器通讯过程"></p><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><h2 id="四、服务器对外提供的资源"><a href="#四、服务器对外提供的资源" class="headerlink" title="四、服务器对外提供的资源"></a>四、服务器对外提供的资源</h2><h3 id="1、常见资源"><a href="#1、常见资源" class="headerlink" title="1、常见资源"></a>1、常见资源</h3><p>文档、图片、音频、视频</p><h3 id="2、数据也是资源"><a href="#2、数据也是资源" class="headerlink" title="2、数据也是资源"></a>2、数据也是资源</h3><p><strong>网页中的数据，也是服务器对外提供的一种资源</strong>，例如股票数据，各行业排行榜等</p><h3 id="3、资源的请求方式"><a href="#3、资源的请求方式" class="headerlink" title="3、资源的请求方式"></a>3、资源的请求方式</h3><ol><li><p>GET请求: 表示<strong>向服务器获取数据</strong>, 例如: 获取页面, 图片, js文件, 数据…</p></li><li><p>POST请求: 表示<strong>向服务器发送数据</strong>, 例如: 登录或注册个人信息, 购买商品, 发表文章…. </p></li></ol><h2 id="五、Ajax概念"><a href="#五、Ajax概念" class="headerlink" title="五、Ajax概念"></a>五、Ajax概念</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>Asynchronous JavaScript And XML(全称不用记), 即使用 XMLHttpRequest 进行数据获取和提交的方式,</p><p>  它最大的特点就是<strong>异步(Async)</strong>, 可以在不重新刷新页面的情况下与服务器通信, 交换数据</p><h3 id="2、异步任务和同步任务回顾"><a href="#2、异步任务和同步任务回顾" class="headerlink" title="2、异步任务和同步任务回顾"></a>2、异步任务和同步任务回顾</h3><ul><li><p>异步任务: 图片,脚本资源加载; 点击事件; 定时器事件; ajax 数据交互</p></li><li><p>异步执行任务的好处: 不会阻塞主线程执行栈上的同步任务</p><p> 复习：一个回调函数就是一个异步任务，先执行同步再执行异步任务</p></li></ul><h3 id="3、jquery-中的-ajax"><a href="#3、jquery-中的-ajax" class="headerlink" title="3、jquery 中的 ajax"></a>3、jquery 中的 ajax</h3><p>使用 jQuery 为我们封装好的 XMLHttpRequest 方法, 可以提升开发的效率, 避免兼容性问题</p><h3 id="4、jquery-中-ajax-的请求方法"><a href="#4、jquery-中-ajax-的请求方法" class="headerlink" title="4、jquery 中 ajax 的请求方法"></a>4、jquery 中 ajax 的请求方法</h3><p>$.get()   用于发送 GET 请求，获取数据</p><p>$.post()  用于发送 POST 请求，提交数据</p><p>$.ajax({ })  用于发送任意 HTTP 请求，可以获取和提交数据</p><h3 id="5、get-和-post-请求的区别-面试-★★★"><a href="#5、get-和-post-请求的区别-面试-★★★" class="headerlink" title="5、get 和 post 请求的区别 (面试)★★★"></a>5、get 和 post 请求的区别 (面试)★★★</h3><ol><li><p>get 请求发送的参数放在 url 中, post 参数放在 请求体 中, 相对安全</p></li><li><p>get 请求会被缓存到浏览器, post 不会被缓存</p></li><li><p>get 请求的参数有长度限制, post 发送数据量比 get 大, 且支持发送二进制数据</p></li></ol><h2 id="六、jQuery中的Ajax"><a href="#六、jQuery中的Ajax" class="headerlink" title="六、jQuery中的Ajax"></a>六、<code>jQuery</code>中的Ajax</h2><h3 id="1、-get-函数介绍"><a href="#1、-get-函数介绍" class="headerlink" title="1、$.get() 函数介绍"></a>1、$.get() 函数介绍</h3><ul><li><p>$.get(url, [data], [callback])</p></li><li><p>参数说明： </p><p> (1) url: 请求地址必须传入</p><p> (2) data: 请求资源时的参数信息 (key/value格式)</p><p> (3) callback: 获取服务器数据成功时的回调函数</p></li></ul><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\get请求参数.png" alt="get请求参数"></p><h3 id="2、-post-函数介绍"><a href="#2、-post-函数介绍" class="headerlink" title="2、$.post() 函数介绍"></a>2、$.post() 函数介绍</h3><p>发送 post 请求语法: </p><ul><li><p>$.post(url, [data], [callback])</p></li><li><p>参数说明： </p><p> (1) url: 请求地址必须传入</p><p> (2) data: 请求资源时的参数信息(key/value格式)</p><p> (3) callback: 请求服务器数据成功时的回调函数</p></li></ul><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\post请求参数.png" alt="post请求参数"></p><h3 id="3、-ajax-函数介绍"><a href="#3、-ajax-函数介绍" class="headerlink" title="3、$.ajax() 函数介绍"></a>3、<code>$.ajax()</code> 函数介绍</h3><ul><li><code>$.ajax()</code> 函数的基本语法如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$.ajax(&#123;<br>       url:  请求地址,<br>       method: 请求方式,<br>       data: 请求参数,<br>       success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123; <span class="hljs-comment">// 请求成功的回调函数 &#125;</span><br>     &#125;)<br></code></pre></td></tr></table></figure><ul><li>注意: 从jquery 1.9 版本开始往后, 请求类型的参数名推荐使用 method</li></ul><h3 id="4、-ajax-发起-get-请求"><a href="#4、-ajax-发起-get-请求" class="headerlink" title="4、$.ajax() 发起 get 请求"></a>4、<code>$.ajax()</code> 发起 get 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>GET</code> 请求时，只需要将 <code>type</code> 属性 的值设置为 ‘<code>GET</code>’ 即可：</p><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\Ajax调用get方法.png" alt="Ajax调用get方法"></p><h3 id="5、-ajax-发起-post-请求"><a href="#5、-ajax-发起-post-请求" class="headerlink" title="5、$.ajax 发起 post 请求"></a>5、<code>$.ajax</code> 发起 post 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>post</code>请求，只需要把 <code>type</code>属性的值 设置为 ‘<code>post</code>’ 即可：</p><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\ajax\Ajax第一天\images\Ajax调用post方法.png" alt="Ajax调用post方法"></p><h2 id="七、接口"><a href="#七、接口" class="headerlink" title="七、接口"></a>七、接口</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>发送 ajax 请求时的 URL 地址, 叫做数据接口; 每个接口必须有自己的请求类型</p><h3 id="2、接口文档"><a href="#2、接口文档" class="headerlink" title="2、接口文档"></a>2、接口文档</h3><p> 项目接口的说明文档, 它是我们调用接口的依据. 前端人员根据接口文档中规定的 url 地址，请求参数等进行调用，</p><p>  后端人员负责维护接口返回的数据</p><h3 id="3、接口规范"><a href="#3、接口规范" class="headerlink" title="3、接口规范"></a>3、接口规范</h3><p>一个规范的接口文档通常包含下列 5 部分：</p><ol><li><p>接口名称: 说明接口功能</p></li><li><p>接口的 URL 地址</p></li><li><p>接口的请求方式: get, post</p></li><li><p>接口的请求参数格式: 参数名称, 参数类型, 参数是否必选, 含义说明</p></li><li><p>接口的响应的详细描述: 返回的数据名称, 数据类型, 含义说明</p></li><li><p>接口的返回示例</p></li></ol><p>注意：以上为理想状态下，一般就一个地址QAQ！</p>]]></content>
    
    
    <categories>
      
      <category>Ajax学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax学习</title>
    <link href="/2021/02/04/Ajax%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
    <url>/2021/02/04/Ajax%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第四天"><a href="#Ajax第四天" class="headerlink" title="Ajax第四天"></a>Ajax第四天</h1><h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><h3 id="1、同源定义"><a href="#1、同源定义" class="headerlink" title="1、同源定义"></a>1、同源定义</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有<strong>相同的源</strong>。</p><h3 id="2、同源策略定义"><a href="#2、同源策略定义" class="headerlink" title="2、同源策略定义"></a>2、同源策略定义</h3><p><strong>同源策略</strong>（英文全称 Same origin policy）是<strong>浏览器</strong>提供的一个<strong>安全功能</strong></p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。</p><p>它用于限制一个网站和另一个非同源网站进行资源交互, 增强了网站的安全性, 避免了被攻击的风险</p><h3 id="3、同源策略限制了哪些交互"><a href="#3、同源策略限制了哪些交互" class="headerlink" title="3、同源策略限制了哪些交互"></a>3、同源策略限制了哪些交互</h3><ol><li><p>无法读取非同源网站的 localStorage, cookie</p></li><li><p>无法访问非同源网站的 DOM</p></li><li><p>无法向非同源网站发送 Ajax 请求</p></li></ol><h2 id="二、跨域"><a href="#二、跨域" class="headerlink" title="二、跨域"></a>二、跨域</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p><strong>同源</strong>指的是两个 URL 的协议、域名、端口一致，反之，则是<strong>跨域</strong>。</p><p>出现跨域的根本原因：<strong>浏览器的同源策略</strong>不允许非同源的 URL 之间进行资源的交互</p><h3 id="2、跨域的经典报错"><a href="#2、跨域的经典报错" class="headerlink" title="2、跨域的经典报错"></a>2、跨域的经典报错</h3><p>xxx has been blocked by CORS policy</p><h3 id="3、浏览器对跨域请求的拦截"><a href="#3、浏览器对跨域请求的拦截" class="headerlink" title="3、浏览器对跨域请求的拦截"></a>3、浏览器对跨域请求的拦截</h3><p>浏览器允许发起跨域请求，但是，<strong>跨域请求回来的数据，会被浏览器拦截</strong>，无法被页面获取到！</p><h3 id="4、HTML-中的跨域标签"><a href="#4、HTML-中的跨域标签" class="headerlink" title="4、HTML 中的跨域标签"></a>4、HTML 中的跨域标签</h3><p>img, script, link, video, iframe… 这些标签可以跨域请求资源</p><h3 id="5、实现跨域的常见几种方法"><a href="#5、实现跨域的常见几种方法" class="headerlink" title="5、实现跨域的常见几种方法"></a>5、实现跨域的常见几种方法</h3><ol><li><p>JSONP 方案: 利用跨域标签的特性发送 GET 请求获取数据 (缺点: 只能支持 GET 请求)</p></li><li><p>CORS 方案: 服务端处理跨域的一种技术手段, 开发中最为常用</p></li><li><p>代理服务器方案: 前端在本地开发的常用方案, 后面会学习专门的插件</p></li><li><p>手动关闭浏览器的同源策略: 不推荐使用, 安全性很差</p></li></ol><h3 id="6、JSONP的实现原理"><a href="#6、JSONP的实现原理" class="headerlink" title="6、JSONP的实现原理"></a>6、JSONP的实现原理</h3><ol><li><p>服务端提供一个函数进行调用, 并传入数据</p></li><li><p>客户端预先准备一个同名函数的声明</p></li><li><p>创建一个 script 标签, 利用 src 属性跨域去获取服务端上的函数调用</p></li></ol><p>注意：</p><ul><li><code>JSONP</code> 只支持 <code>GET</code> 数据请求，不支持 POST 请求。</li><li><strong><code>JSONP</code> 和 Ajax 之间没有任何关系</strong>，不能把 <code>JSONP</code> 请求数据的方式叫做 Ajax，因为 <code>JSONP</code> 没有用到<code>XMLHttpRequest</code> 这个对象</li></ul><h3 id="7、jQuery中的JSONP请求"><a href="#7、jQuery中的JSONP请求" class="headerlink" title="7、jQuery中的JSONP请求"></a>7、<code>jQuery</code>中的<code>JSONP</code>请求</h3><p> 默认情况下, 使用 jquery 发送 jsonp 请求, 会自动携带一个 ?callback=jQuery** 的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">$.ajax(&#123;<br>          url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/jsonp&#x27;</span>,<br>          data: &#123;<br>              name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>              age: <span class="hljs-number">10</span><br>          &#125;,<br>          dataType: <span class="hljs-string">&#x27;JSONP&#x27;</span>,<br>          <span class="hljs-comment">// 更改回调函数的参数（一般很少操作，服务器会识别不了）</span><br>          <span class="hljs-comment">// jsonp: &#x27;cdk&#x27;,</span><br>          <span class="hljs-comment">// 更改回调函数的名字</span><br>          <span class="hljs-comment">// jsonpCallback: &#x27;foo&#x27;,</span><br>          success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(res);<br>          &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><h2 id="三、防抖-amp-节流"><a href="#三、防抖-amp-节流" class="headerlink" title="三、防抖&amp;节流"></a>三、防抖&amp;节流</h2><h3 id="1、防抖策略-debounce-解释"><a href="#1、防抖策略-debounce-解释" class="headerlink" title="1、防抖策略(debounce)解释"></a>1、防抖策略(debounce)解释</h3><p>当一个事件触发时, 不立即执行回调, 延迟一段时间后再执行; 在这段时间内事件再次触发,那么就重新开始计时</p><h3 id="2、防抖策略的好处"><a href="#2、防抖策略的好处" class="headerlink" title="2、防抖策略的好处"></a>2、防抖策略的好处</h3><p>当我们频繁, 连续触发某个事件时, 只会执行最后一次, 节省了请求资源</p><h3 id="3、防抖的应用场景"><a href="#3、防抖的应用场景" class="headerlink" title="3、防抖的应用场景"></a>3、防抖的应用场景</h3><p> 输入框连续输入字符, 浏览器窗口大小不断调整 </p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 先定义一个定时器编号</span><br>        <span class="hljs-keyword">var</span> timeID = <span class="hljs-literal">null</span>;<br>        $(<span class="hljs-string">&#x27;button&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 清除原来的定时器</span><br>            <span class="hljs-built_in">clearTimeout</span>(timeID);<br>            <span class="hljs-comment">// 再设置一个新的定时器</span><br>            timeID = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">132</span>);<br>            &#125;, <span class="hljs-number">500</span>)<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="4、缓存搜索的建议列表"><a href="#4、缓存搜索的建议列表" class="headerlink" title="4、缓存搜索的建议列表"></a>4、缓存搜索的建议列表</h3><ol><li><p>定义全局缓存对象</p></li><li><p>定义全局缓存对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 缓存对象</span><br><span class="hljs-keyword">var</span> cacheObj = &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>将搜索结果保存到缓存对象中</p><ul><li>键就是用户输入的关键字，值就是服务器返回的value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 渲染建议列表</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderSuggestList</span>(<span class="hljs-params">res</span>) </span>&#123;<br>     <span class="hljs-comment">// ...省略其他代码</span><br>     <span class="hljs-comment">// 将搜索的结果，添加到缓存对象中</span><br>     <span class="hljs-keyword">var</span> k = $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).val().trim()<br>     cacheObj[k] = res<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>优先从缓存中获取搜索建议</p><ul><li>在发起请求之前，先判断缓存中是否有数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 监听文本框的 keyup 事件</span><br>$(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-comment">// ...省略其他代码</span><br>     <span class="hljs-comment">// 优先从缓存中获取搜索建议</span><br>     <span class="hljs-keyword">if</span> (cacheObj[keywords]) &#123;<br>     <span class="hljs-keyword">return</span> renderSuggestList(cacheObj[keywords])<br>     &#125;<br>     <span class="hljs-comment">// 获取搜索建议列表</span><br>     debounceSearch(keywords)<br> &#125;)<br></code></pre></td></tr></table></figure><h3 id="5、节流"><a href="#5、节流" class="headerlink" title="5、节流"></a>5、节流</h3></li><li><p>定义</p><p>顾名思义，可以减少一段时间内事件的触发频率。</p></li><li><p>节流的应用场景</p><p>① 鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p><p>② 懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源；</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个节流阀，默认为打开</span><br>        <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><br>        $(<span class="hljs-string">&quot;button&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-comment">// 判断当前阀门是否打开</span><br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// 开始执行动画前，先关闭阀门</span><br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br><br>                <span class="hljs-comment">// 动画结束后，打开阀门</span><br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;, <span class="hljs-number">500</span>)<br>        &#125;)<br></code></pre></td></tr></table></figure><p>案例：小天使鼠标跟随效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//定义一个节流阀,默认打开</span><br>           <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;<br>           $(<span class="hljs-built_in">document</span>).mousemove(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>               <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span>;<br>               <span class="hljs-comment">//动画开始前关闭</span><br>               flag = <span class="hljs-literal">false</span>;<br>               <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   <span class="hljs-comment">// 打印鼠标移动次数</span><br>                   <span class="hljs-built_in">console</span>.log(num++);<br><br>                   $(<span class="hljs-string">&#x27;img&#x27;</span>).css(&#123;<br>                       left: e.pageX,<br>                       top: e.pageY<br>                   &#125;);<br> <span class="hljs-comment">//动画结束后打开</span><br>                   flag = <span class="hljs-literal">true</span>;<br>               &#125;, <span class="hljs-number">20</span>)<br>           &#125;)<br>       &#125;)<br></code></pre></td></tr></table></figure><h3 id="6、防抖和节流的区别"><a href="#6、防抖和节流的区别" class="headerlink" title="6、防抖和节流的区别"></a>6、防抖和节流的区别</h3><ul><li><p>防抖和节流的共同点:</p><ol><li><p>都能有效地降低事件触发的频率</p></li><li><p>都能节省资源, 优化性能和用户体验</p></li></ol></li><li><p>防抖和节流的不同点:</p><ol><li><p>防抖在频繁触发事件的情况下, 只有最后一次生效; 节流则是在单位时间内生效一次</p></li><li><p>防抖实现的核心是 “销毁定时器”; 节流实现的核心是 “更新节流阀”</p></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Ajax学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax第三天</title>
    <link href="/2021/02/04/Ajax%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/2021/02/04/Ajax%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="Ajax第三天"><a href="#Ajax第三天" class="headerlink" title="Ajax第三天"></a>Ajax第三天</h1><h2 id="一、XMLHttpRequest的基本使用"><a href="#一、XMLHttpRequest的基本使用" class="headerlink" title="一、XMLHttpRequest的基本使用"></a>一、<code>XMLHttpRequest</code>的基本使用</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p> 浏览器为我们提供的一个内置对象(构造函数), 通过它我们可以向服务器发送请求, 并接受响应</p><p>  $.ajax() 请求方法底层就是 jQuery 封装这个对象的一系列方法来实现的</p><h3 id="2、使用xhr发起GET请求"><a href="#2、使用xhr发起GET请求" class="headerlink" title="2、使用xhr发起GET请求"></a>2、使用<code>xhr</code>发起GET请求</h3><ul><li><p>步骤：</p><ul><li><p>创建 <code>xhr</code> 对象</p></li><li><p>调用 <code>xhr.open()</code> 函数</p></li><li><p>调用 <code>xhr.send()</code> 函数</p></li><li><p>监听 <code>xhr.onreadystatechange</code> 事件</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 构建 xhr 实例对象</span><br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    <span class="hljs-comment">// 2. 初始化请求 open(请求方式，url地址)</span><br>    xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>);<br>    <span class="hljs-comment">// 3. 发送请求  send()</span><br>    xhr.send();<br>    <span class="hljs-comment">// 4. 监听请求状态, 获取响应的数据</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-comment">// 判断请求是否完成，HTTP请求状态码是否成功</span><br>        <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>    <span class="hljs-comment">// 获取响应数据  </span><br>     <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">// onload表示请求已经完成，和上面if判断作用相同</span><br>    xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 获取响应数据</span><br>        <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>if判断代码中xhr.status不是返回数据中的status</p><h3 id="3、了解xhr对象的readyState属性"><a href="#3、了解xhr对象的readyState属性" class="headerlink" title="3、了解xhr对象的readyState属性"></a>3、了解<code>xhr</code>对象的<code>readyState</code>属性</h3><ul><li>xhr 请求的所有状态码<ul><li>0 (未初始化) ==&gt; 请求还未初始化</li><li>1 (正在加载) ==&gt; 已建立服务器链接</li><li> 2 (加载成功) ==&gt; 请求已接受</li><li>3 (交互)   ==&gt; 正在处理请求</li><li>4 (完成)   ==&gt; 请求已完成, 响应数据已传输</li></ul></li></ul><h3 id="4、查询参数"><a href="#4、查询参数" class="headerlink" title="4、查询参数"></a>4、查询参数</h3><ul><li><p>定义：在 url 末尾添加的以 ? 开头的参数，叫做查询参数</p><p>比如： <a href="http://www.youxi.cn/?hero=tank&amp;money=99&amp;skin=pink">http://www.youxi.cn?hero=tank&amp;money=99&amp;skin=pink</a></p></li><li><p>参数特征</p><p>格式符合键值对的格式，多个键值对之间使用 &amp; 符号进行连接</p></li><li><p>作用</p></li></ul><ol><li><p>多个页面之间传递数据(从首页跳转到首页，显示登录名（location.search）);</p></li><li><p>给服务器发送 get 请求的数据</p></li></ol><h3 id="5、get请求带参数的写法"><a href="#5、get请求带参数的写法" class="headerlink" title="5、get请求带参数的写法"></a>5、get请求带参数的写法</h3><p>把 参数 按键值对字符串的形式拼接到 url 后面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get?name=ZhangSan&amp;&amp;age=12&amp;&amp;sex=man&#x27;</span>);<br>        xhr.send();<br>        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>            &#125;;<br>        &#125;;<br></code></pre></td></tr></table></figure><h3 id="6、URL编码"><a href="#6、URL编码" class="headerlink" title="6、URL编码"></a>6、URL编码</h3><p>浏览器中的 URL 中只允许出现字母, 符号和数字, 不允许出现汉字, 如果出现需要对其进行编码</p><ol><li>编码的规则：</li></ol><p>使用字母，数字和特殊符号对其他字符(如汉字)进行编码</p><ol start="2"><li><p>浏览器内置的 URL 编码和解码方法</p><p>encodeURI(参数) 对参数进行 URI 编码</p><p>decodeURI(参数) 对参数进行 URI 解码</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;2月6号放假&#x27;</span><br>      <span class="hljs-keyword">var</span> str2 = <span class="hljs-built_in">encodeURI</span>(str);<br>      <span class="hljs-built_in">console</span>.log(str2);<br>      <span class="hljs-keyword">var</span> str3 = <span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;%E6%94%BE%E5%81%87&#x27;</span>);<br>      <span class="hljs-built_in">console</span>.log(str3);<span class="hljs-comment">//反编译为 放假</span><br></code></pre></td></tr></table></figure><h3 id="7、post请求原生写法"><a href="#7、post请求原生写法" class="headerlink" title="7、post请求原生写法"></a>7、post请求原生写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>      xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>);<br>      <span class="hljs-comment">// 设置post请求参数的编码方式</span><br>      xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>      <span class="hljs-comment">// 设置post请求时，要传递键值对字符串</span><br>      xhr.send(<span class="hljs-string">&#x27;bookname=熟虾&amp;author=之颂&amp;publisher=125&#x27;</span>);<br>      xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;                <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>          &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="二、数据交换格式"><a href="#二、数据交换格式" class="headerlink" title="二、数据交换格式"></a>二、数据交换格式</h2><h3 id="1、数据交换格式"><a href="#1、数据交换格式" class="headerlink" title="1、数据交换格式"></a>1、数据交换格式</h3><pre><code> 客户端和服务端之间进行数据传输时, 需要使用公共的数据格式.。</code></pre><p><strong>JSON 是前后端开发中最常用的一种轻量级数据交换格式</strong>,除此之外还有 XML 这种带有语义化的数据格式。</p><ul><li><code>XML</code> 的英文全称是 <code>EXtensible Markup Language</code>，即<strong>可扩展标记语言</strong>。</li><li>XML和HTML的区别：<ul><li><code>HTML</code> 被设计用来描述网页上的<strong>内容</strong>，是网页内容的载体</li><li><code>XML</code> 被设计用来<strong>传输和存储数据</strong>，是数据的载体</li><li><strong>客户端向服务器</strong>发送数据利用的是XML，<strong>服务器向客户端</strong>发送数据利用的是HTML</li></ul></li><li>XML的缺点<ul><li><code>XML</code> 格式臃肿，和数据无关的代码多，体积大，传输效率低</li><li>在 <code>Javascript</code> 中解析 <code>XML</code> 比较麻烦</li></ul></li></ul><h3 id="2、JSON（JavaScript-Object-Notation-）"><a href="#2、JSON（JavaScript-Object-Notation-）" class="headerlink" title="2、JSON（JavaScript Object Notation ）"></a>2、JSON（JavaScript Object Notation ）</h3><p> JSON 可以理解为 js 中对象的字符串表示法, 本质上还是一个字符串。</p><ol><li><p><strong>概念：</strong><code>JSON</code> 的英文全称是 <code>JavaScript Object Notation</code>，即“<strong>JavaScript 对象表示法</strong>”。</p></li><li><p><strong>作用：</strong><code>JSON</code> 是一种轻量级的文本数据交换格式，在作用上类似于 <code>XML</code>，<strong>专门用于存储和传输数据</strong>，但</p><p>是 <code>JSON</code> 比 <code>XML</code> <strong>更小、更快、更易解析</strong>。</p></li></ol><h3 id="3、JSON-数据格式的注意"><a href="#3、JSON-数据格式的注意" class="headerlink" title="3、JSON 数据格式的注意"></a>3、JSON 数据格式的注意</h3><ol><li><p>普通对象最外层使用 {  } 包裹, 数组的最外层使用 [  ] 包裹</p></li><li><p>属性名和字符串必须是双引号括起来的字符串, 最后一个属性后不能有逗号（必须严格遵守）</p></li><li><p>属性值或数组元素可以是 number, string, boolean, array, null, object 6种</p><p>​        但不能是 undefined 和 function</p></li><li><p>不能在 json 中填写注释</p></li></ol><p><strong><code>JSON</code> 的作用：</strong>在计算机与网络之间存储和传输数据。</p><p><strong><code>JSON</code> 的本质：</strong>用字符串来表示 <code>Javascript</code> 对象数据或数组数据</p><h3 id="4、JSON和JS对象的关系"><a href="#4、JSON和JS对象的关系" class="headerlink" title="4、JSON和JS对象的关系"></a>4、<code>JSON</code>和<code>JS</code>对象的关系</h3><p><code>JSON</code> 是 <code>JS</code> 对象的字符串表示法，它使用文本表示一个 <code>JS</code> 对象的信息，本质是一个字符串。</p><h3 id="5、JSON和JS对象的互转"><a href="#5、JSON和JS对象的互转" class="headerlink" title="5、JSON和JS对象的互转"></a>5、<code>JSON</code>和<code>JS</code>对象的互转</h3><ol><li>要实现从 <code>JSON</code> 字符串转换为 <code>JS</code> 对象，使用 <code>JSON.parse()</code> 方法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj=<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#x27;</span>);<br><span class="hljs-comment">//结果是：&#123;a:&#x27;Hello&#x27;,b:&#x27;World&#x27;&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>要实现从 <code>JS</code> 对象转换为 <code>JSON</code> 字符串，使用 <code>JSON.stringify()</code> 方法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json=<span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;Hello&#x27;</span>,<span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;World&#x27;</span>&#125;);<br><span class="hljs-comment">//结果是：&#x27;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>总结：<code> JSON.stringify()</code>   <code>JSON.parse()</code></p><ol><li><p><code>todolist</code> 本地存储， 只能存储字符串格式的数据， <code>JSON.stringify()</code></p></li><li><p>JS高级 深拷贝： JSON.parse(JSON.stringify(obj)) //生成的是一个新对象</p></li><li><p>把服务器返回的json字符串解析成js对象格式 JSON.parse()</p></li></ol></li></ol><h3 id="6、序列化和反序列化"><a href="#6、序列化和反序列化" class="headerlink" title="6、序列化和反序列化"></a>6、序列化和反序列化</h3><p>把<strong>数据对象</strong> <strong>转换为</strong> <strong>字符串</strong>的过程，叫做<strong>序列化</strong>，例如：调用 <code>JSON.stringify()</code> 函数的操作，叫做 <code>JSON</code> 序列化。</p><p>把<strong>字符串</strong> <strong>转换为</strong> <strong>数据对象</strong>的过程，叫做<strong>反序列化</strong>，例如：调用 <code>JSON.parse()</code> 函数的操作，叫做 <code>JSON</code> 反序列化。</p><h2 id="三、XMLHttpRequest-Level2的新特性"><a href="#三、XMLHttpRequest-Level2的新特性" class="headerlink" title="三、XMLHttpRequest Level2的新特性"></a>三、<code>XMLHttpRequest Level2</code>的新特性</h2><h3 id="1、老版本-XMLHttpRequest-问题"><a href="#1、老版本-XMLHttpRequest-问题" class="headerlink" title="1、老版本 XMLHttpRequest 问题"></a>1、老版本 <code>XMLHttpRequest</code> 问题</h3><ol><li><p>只支持文本数据的传送，无法用来读取和上传二进制文件</p></li><li><p>传送和接收数据时，没有进度信息，只能提示有没有完成</p></li></ol><h3 id="2、新版本-XMLHttpRequest-特性"><a href="#2、新版本-XMLHttpRequest-特性" class="headerlink" title="2、新版本 XMLHttpRequest 特性"></a>2、新版本 XMLHttpRequest 特性</h3><ol><li><p>可以设置 HTTP 请求的超时时限</p></li><li><p>可以使用 FormData 对象管理表单数据</p></li><li><p>可以上传文件</p></li><li><p>可以获取数据请求的进度信息</p></li></ol><h3 id="3、为-ajax-请求设置超时限制"><a href="#3、为-ajax-请求设置超时限制" class="headerlink" title="3、为 ajax 请求设置超时限制"></a>3、为 ajax 请求设置超时限制</h3><ul><li><p>设置超时时间（默认为毫秒）</p><p>xhr.timeout = 超时时间</p></li><li><p>xhr 实例的超时事件</p><p>   xhr.ontimeout = fn</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>       xhr.timeout = <span class="hljs-number">10</span>;<br>    xhr.addEventListener(<span class="hljs-string">&#x27;timeout&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请求超时&#x27;</span>)&#125;);<br>           xhr.open(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>);<br>           xhr.send();<br>           xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>         <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h2 id="四、FormData对象管理表单数据"><a href="#四、FormData对象管理表单数据" class="headerlink" title="四、FormData对象管理表单数据"></a>四、<code>FormData</code>对象管理表单数据</h2><h3 id="1、什么是FormData？"><a href="#1、什么是FormData？" class="headerlink" title="1、什么是FormData？"></a>1、什么是FormData？</h3><p>浏览器提供的一个内置对象(构造函数), 可以轻松管理表单数据的键值对 (key/value)</p><h3 id="2、FormData-相关方法"><a href="#2、FormData-相关方法" class="headerlink" title="2、FormData 相关方法"></a>2、FormData 相关方法</h3><ol><li><p>添加一条数据 append()</p></li><li><p>查询一条数据 get()</p></li><li><p>设置一条数据 set()</p></li><li><p>遍历数据 forEach()</p></li></ol><h3 id="3、在-Ajax-中的使用"><a href="#3、在-Ajax-中的使用" class="headerlink" title="3、在 Ajax 中的使用"></a>3、在 Ajax 中的使用</h3><p>可以直接使用 send 方法发送 formData 格式的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 新建一个 FormData 对象</span><br>        <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData();<br><br>        <span class="hljs-comment">// 2. 添加一条数据: append()</span><br>        fd.append(<span class="hljs-string">&#x27;bookname&#x27;</span>, <span class="hljs-string">&#x27;儒林外史&#x27;</span>);<br>        fd.append(<span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;费瓦罗纳&#x27;</span>);<br>        fd.append(<span class="hljs-string">&#x27;publisher&#x27;</span>, <span class="hljs-string">&#x27;圣埃蒂安&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(fd.get(<span class="hljs-string">&#x27;author&#x27;</span>));<br><br>        <span class="hljs-comment">// 3. 设置一条数据: set()</span><br>        fd.set(<span class="hljs-string">&#x27;publisher&#x27;</span>, <span class="hljs-string">&#x27;埃尔法&#x27;</span>);<br>        fd.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;);<br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>        xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);<br>        xhr.send(fd);<br><br>        xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (xhr.readyState == <span class="hljs-number">4</span> &amp;&amp; xhr.status == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-built_in">console</span>.log(xhr.responseText);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="4、formData快速获取表单数据"><a href="#4、formData快速获取表单数据" class="headerlink" title="4、formData快速获取表单数据"></a>4、formData快速获取表单数据</h3><p>使用 new FormData(原生form元素) 可以一次性获取表单中所有的数据 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;form&#x27;</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>         e.preventDefault();<br>         <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData(<span class="hljs-built_in">this</span>);<br>         <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>         xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);<br>         xhr.send(fd);<br>         xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.parse(xhr.responseText));<br>         &#125;<br>     &#125;);<br></code></pre></td></tr></table></figure><h2 id="五、formData上传文件"><a href="#五、formData上传文件" class="headerlink" title="五、formData上传文件"></a>五、formData上传文件</h2><h3 id="1、案例：formData上传文件并显示文件上传进度-原生方法"><a href="#1、案例：formData上传文件并显示文件上传进度-原生方法" class="headerlink" title="1、案例：formData上传文件并显示文件上传进度(原生方法)"></a>1、案例：formData上传文件并显示文件上传进度(原生方法)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#upload-btn&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// (原生文本选择框.files)</span><br>           <span class="hljs-keyword">var</span> files = $(<span class="hljs-string">&#x27;#file&#x27;</span>)[<span class="hljs-number">0</span>].files;<br>           <span class="hljs-comment">// 判断文件列表长度</span><br>           <span class="hljs-keyword">if</span> (files.length &lt;= <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请选择文件上传&#x27;</span>);<br>           &#125;;<br>           <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData();<br>           <span class="hljs-comment">// 向fd中添加一个数据</span><br>           fd.append(<span class="hljs-string">&#x27;avatar&#x27;</span>, files[<span class="hljs-number">0</span>]);<br><br>           <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br><br>           <span class="hljs-comment">// 绑定上传进度事件</span><br>           xhr.upload.onprogress = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>               <span class="hljs-comment">// console.log(e.lengthComputable);</span><br>               <span class="hljs-comment">// 判断当前文件是否可计算</span><br>               <span class="hljs-keyword">if</span> (e.lengthComputable) &#123;<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(e.loaded / e.total * <span class="hljs-number">100</span>));<br>                   <span class="hljs-comment">// 获取文件上传进度e.total表示总数据量， e.loaded表示已经上传的数据量</span><br>                   <span class="hljs-keyword">var</span> percentage = <span class="hljs-built_in">parseInt</span>(e.loaded / e.total * <span class="hljs-number">100</span>) + <span class="hljs-string">&#x27;%&#x27;</span>;<br>                   <span class="hljs-comment">// 给进度条设置width样式属性和内容</span><br>                   $(<span class="hljs-string">&#x27;#bar&#x27;</span>).css(<span class="hljs-string">&#x27;width&#x27;</span>, percentage).text(percentage);<br>               &#125;;<br>           &#125;;<br>           <span class="hljs-comment">// 为xhr绑定文件获取成功事件</span><br>           xhr.upload.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               $(<span class="hljs-string">&#x27;#bar&#x27;</span>).removeClass().addClass(<span class="hljs-string">&#x27;progress-bar progress-bar-success&#x27;</span>)<br>           &#125;<br><br>           xhr.open(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>);<br>           xhr.send(fd);<br>           xhr.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">JSON</span>.parse(xhr.responseText)<br>               <span class="hljs-built_in">console</span>.log(res);<br>               <span class="hljs-comment">// 将地址给img标签</span><br>               $(<span class="hljs-string">&#x27;img&#x27;</span>).prop(<span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + res.url);<br>           &#125;<br>       &#125;)<br></code></pre></td></tr></table></figure><h3 id="2、jq版本文件上传"><a href="#2、jq版本文件上传" class="headerlink" title="2、jq版本文件上传"></a>2、jq版本文件上传</h3><ul><li><h3 id="ajaxStart-callback"><a href="#ajaxStart-callback" class="headerlink" title="ajaxStart(callback)"></a><code>ajaxStart(callback)</code></h3><p><code>Ajax</code> 请求<strong>开始</strong>时，执行 <code>ajaxStart</code> 函数。</p><ul><li><strong>注意：</strong> <code>$(document).ajaxStart()</code> 函数<strong>会监听当前文档内所有的 Ajax 请求</strong>。</li></ul></li><li><h3 id="ajaxStop-callback"><a href="#ajaxStop-callback" class="headerlink" title="ajaxStop(callback)"></a><code>ajaxStop(callback)</code></h3><p><code>Ajax</code> 请求<strong>结束</strong>时，执行 <code>ajaxStop</code> 函数。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-built_in">document</span>).ajaxStart(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               $(<span class="hljs-string">&#x27;#loading&#x27;</span>).show()<br>           &#125;);<br>           $(<span class="hljs-string">&#x27;#upload-btn&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-comment">// (原生文本选择框.files)</span><br>               <span class="hljs-keyword">var</span> files = $(<span class="hljs-string">&#x27;#file&#x27;</span>)[<span class="hljs-number">0</span>].files;<br>               <span class="hljs-comment">// 判断文件列表长度</span><br>               <span class="hljs-keyword">if</span> (files.length &lt;= <span class="hljs-number">0</span>) &#123;<br>                   <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请选择文件上传&#x27;</span>);<br>               &#125;;<br>               <span class="hljs-keyword">var</span> fd = <span class="hljs-keyword">new</span> FormData();<br>               <span class="hljs-comment">// 向fd中添加一个数据</span><br>               fd.append(<span class="hljs-string">&#x27;avatar&#x27;</span>, files[<span class="hljs-number">0</span>]);<br><br>               $.ajax(&#123;<br>                   url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/upload/avatar&#x27;</span>,<br>                   method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>                   data: fd,<br>                   <span class="hljs-comment">// 使用formdata 默认参数编码 multipart/form-data</span><br>                   contentType: <span class="hljs-literal">false</span>,<br>                   <span class="hljs-comment">// 不需要对请求体中内容进行额外处理</span><br>                   processData: <span class="hljs-literal">false</span>,<br>                   <span class="hljs-comment">// 发送ajax请求前调用</span><br>                   beforeSend: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                       <span class="hljs-comment">// console.log(123);</span><br>                       $(<span class="hljs-string">&#x27;#loading&#x27;</span>).show()<br>                   &#125;,<br>                   success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>                       <span class="hljs-built_in">console</span>.log(res);<br>                       $(<span class="hljs-string">&#x27;#loading&#x27;</span>).prop(<span class="hljs-string">&#x27;src&#x27;</span>, <span class="hljs-string">&#x27;http://www.liulongbin.top:3006&#x27;</span> + res.url);<br>                   &#125;<br>               &#125;)<br>           &#125;)<br></code></pre></td></tr></table></figure><h2 id="六、什么是axios"><a href="#六、什么是axios" class="headerlink" title="六、什么是axios"></a>六、什么是<code>axios</code></h2><h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p><code>Axios</code> 是专注于<strong>网络数据请求</strong>的库。</p><p>相比于原生的 <code>XMLHttpRequest</code> 对象，<code>axios</code> <strong>简单易用</strong>。</p><p>相比于 <code>jQuery</code>，<code>axios</code> 更加<strong>轻量化</strong>，只专注于网络数据请求。</p><h3 id="2、axios发起GET请求"><a href="#2、axios发起GET请求" class="headerlink" title="2、axios发起GET请求"></a>2、<code>axios</code>发起GET请求</h3><p><code>axios.get()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.get(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>, &#123;<br>            params: &#123;<br>                id: <span class="hljs-number">10</span>,<br>                age: <span class="hljs-number">20</span><br>            &#125;<br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res.data);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="3、axios发起POST请求"><a href="#3、axios发起POST请求" class="headerlink" title="3、axios发起POST请求"></a>3、<code>axios</code>发起<code>POST</code>请求</h3><p><code>axios.post()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.post(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>, &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            age: <span class="hljs-number">10</span>,<br>            height: <span class="hljs-number">170</span><br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="4、直接使用axios发起请求"><a href="#4、直接使用axios发起请求" class="headerlink" title="4、直接使用axios发起请求"></a>4、直接使用<code>axios</code>发起请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起get请求</span><br>axios(&#123;<br>            url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<br>            method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>            params: &#123;<br>                id: <span class="hljs-number">1</span>,<br>                bookname: <span class="hljs-string">&#x27;西游记&#x27;</span><br>            &#125;<br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res.data);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;)<br><span class="hljs-comment">//发起post请求</span><br>        axios(&#123;<br>            url: <span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,<br>            method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            data: &#123;<br>                bookname: <span class="hljs-string">&#x27;儒林外史&#x27;</span>,<br>                author: <span class="hljs-string">&#x27;年份酒偶发&#x27;</span>,<br>                publisher: <span class="hljs-string">&#x27;阿萨德刚&#x27;</span><br>            &#125;<br>        &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(res.data);<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(err);<br>        &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ajax学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级第五天</title>
    <link href="/2021/02/04/JS%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
    <url>/2021/02/04/JS%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS第五天"><a href="#JS第五天" class="headerlink" title="JS第五天"></a>JS第五天</h1><h2 id="一、ES6相关概念"><a href="#一、ES6相关概念" class="headerlink" title="一、ES6相关概念"></a>一、ES6相关概念</h2><h3 id="1、什么是ES6"><a href="#1、什么是ES6" class="headerlink" title="1、什么是ES6"></a>1、什么是ES6</h3><p>ES 的全称是 ECMAScript ,从2015年6月开始每年都会更新一下，统称为ES6</p><h3 id="2、使用ES6的目的"><a href="#2、使用ES6的目的" class="headerlink" title="2、使用ES6的目的"></a>2、使用ES6的目的</h3><ul><li>变量提升特性增加了程序运行时的不可预测性</li><li>语法过于松散，实现相同的功能，不同的人可能会写出不同的代码</li></ul><h2 id="二、ES6新增语法"><a href="#二、ES6新增语法" class="headerlink" title="二、ES6新增语法"></a>二、ES6新增语法</h2><h3 id="1、let-（★★★）"><a href="#1、let-（★★★）" class="headerlink" title="1、let （★★★）"></a>1、let （★★★）</h3><h4 id="1-1-作用："><a href="#1-1-作用：" class="headerlink" title="1.1 作用："></a>1.1 作用：</h4><p>用来声明一个有块级作用域的变量，使用方法和 var 一样</p><h4 id="1-2-let-定义变量的特点："><a href="#1-2-let-定义变量的特点：" class="headerlink" title="1.2 let 定义变量的特点："></a>1.2 let 定义变量的特点：</h4><ol><li><p>只在声明时的块或子块中可用</p></li><li><p>不存在变量提升，只能先声明再使用</p></li><li><p>存在“暂存死区”</p></li><li><p>同一作用域下不能重复声明同一变量</p></li><li><p>声明的变量不会挂载在 window 对象上 </p></li></ol><h4 id="1-3-暂时性死区的本质"><a href="#1-3-暂时性死区的本质" class="headerlink" title="1.3 暂时性死区的本质"></a>1.3 暂时性死区的本质</h4><p>  只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bar = <span class="hljs-number">20</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>          <span class="hljs-comment">//bar存在当前的块级作用域中，但无法提前访问</span><br>          <span class="hljs-built_in">console</span>.log(bar);<span class="hljs-comment">//会报错</span><br>          <span class="hljs-keyword">let</span> bar = <span class="hljs-number">10</span>;<br>      &#125;<br></code></pre></td></tr></table></figure><h4 id="1-4经典面试题："><a href="#1-4经典面试题：" class="headerlink" title="1.4经典面试题："></a>1.4经典面试题：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [];<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i)<br>        &#125;<br>    &#125;<br>      arr[<span class="hljs-number">0</span>]();<span class="hljs-comment">//0</span><br>      arr[<span class="hljs-number">1</span>]();<span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h3 id="2、const关键字"><a href="#2、const关键字" class="headerlink" title="2、const关键字"></a>2、const关键字</h3><h4 id="2-1const-作用"><a href="#2-1const-作用" class="headerlink" title="2.1const 作用"></a>2.1const 作用</h4><p>用来声明一个有块级作用域的常量(内存地址不能变化的量)</p><h4 id="2-2const-定义常量的特点"><a href="#2-2const-定义常量的特点" class="headerlink" title="2.2const 定义常量的特点"></a>2.2const 定义常量的特点</h4><ol><li><p>声明常量时必须要初始化值</p></li><li><p>同样具有块级作用域和“暂存死区”</p></li><li><p>赋值为简单数据类型时，不能直接修改值</p></li><li><p>赋值为复杂数据类型时，可以修改对象内部的属性和方法</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;<br>         a: <span class="hljs-number">1</span>,<br>         b: <span class="hljs-number">2</span><br>     &#125;;<br>     data.a = <span class="hljs-number">10</span> <span class="hljs-comment">//这里可以通过，原因是data的内存地址值没有发生改变</span><br>         <span class="hljs-comment">// data = []; //报错，原因是data的地址值发生了改变</span><br></code></pre></td></tr></table></figure><h4 id="2-3、let、const、var-的区别"><a href="#2-3、let、const、var-的区别" class="headerlink" title="2.3、let、const、var 的区别"></a>2.3、let、const、var 的区别</h4><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\JS高级\JS高级第五天\images\var&let&const区别.png" alt="var&amp;let&amp;const区别"></p><h3 id="3、解构赋值"><a href="#3、解构赋值" class="headerlink" title="3、解构赋值"></a>3、解构赋值</h3><h4 id="3-1解构赋值（强大）"><a href="#3-1解构赋值（强大）" class="headerlink" title="3.1解构赋值（强大）"></a>3.1解构赋值（强大）</h4><p>可以从数组或对象中，把值取出来，再赋值给对应的变量</p><h4 id="3-2对数组进行解构"><a href="#3-2对数组进行解构" class="headerlink" title="3.2对数组进行解构"></a>3.2对数组进行解构</h4><p> let [a, b, …] = 数组</p><p>   使用变量名和对应位置的数组元素一一匹配，匹配成功就把元素赋值给变量</p><ul><li><p><strong>使用注意</strong></p><p> (1) 没有解构成功的变量，值为 undefined</p><p> (2) 变量的位置和数组中值的位置一一对应</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 没有解构成功的变量，值为 undefined</span><br>      <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>];<br>      <span class="hljs-keyword">let</span> [aa, bb] = arr2;<br>      <span class="hljs-built_in">console</span>.log(aa, bb); <span class="hljs-comment">//4  undefined</span><br>      <span class="hljs-comment">// 2. 不需要解构的元素可以使用 逗号 隔开</span><br>      <span class="hljs-keyword">let</span> [, a1, b1] = arr;<br>      <span class="hljs-built_in">console</span>.log(a1, b1);<br>      <span class="hljs-comment">// 3. 交换两个变量</span><br>      <span class="hljs-keyword">let</span> num1 = <span class="hljs-number">10</span>;<br>      <span class="hljs-keyword">let</span> num2 = <span class="hljs-number">20</span>;<br>      [num1, num2] = [num2, num1];<br>      <span class="hljs-built_in">console</span>.log(num1, num2); <span class="hljs-comment">//20  10</span><br></code></pre></td></tr></table></figure><h4 id="3-3对对象进行解构"><a href="#3-3对对象进行解构" class="headerlink" title="3.3对对象进行解构"></a>3.3对对象进行解构</h4><p>   let {prop1, prop2, …} = 对象</p><p>   使用变量名和对象中的属性名进行一一匹配，匹配成功就把对象的属性值赋值给变量</p><ul><li><p><strong>使用注意</strong></p><p>   (1) 没有解构成功的变量，值为 undefined</p><p>   (2) 变量的名称和属性名一一对应</p><p>   (3) 变量名的顺序和数量没有要求</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>                name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>                age: <span class="hljs-number">18</span>,<br>                height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>                weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>            &#125;<br> <span class="hljs-comment">// 没有解构成功的变量，值为 undefined</span><br>        <span class="hljs-keyword">let</span> &#123;<br>            sex<br>        &#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(sex);<span class="hljs-comment">//undefined</span><br>      <span class="hljs-comment">// 变量名的顺序和数量没有要求</span><br>      <span class="hljs-comment">// 属性只能解构一次，因为let声明变量不能重复</span><br>        <span class="hljs-keyword">let</span> &#123;<br>            weight,<br>            name,<br>            age<br>        &#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(name, age, weight);<br></code></pre></td></tr></table></figure><ul><li>解构后的变量起个别名 : 变量名</li></ul><p>这里冒号左边的name只用来进行属性名匹配， 冒号右边才是真正赋值的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">let</span> obj = &#123;<br>                name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>                age: <span class="hljs-number">18</span>,<br>                height: <span class="hljs-string">&#x27;175cm&#x27;</span>,<br>                weight: <span class="hljs-string">&#x27;65kg&#x27;</span><br>            &#125;<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">name</span>: name2,<span class="hljs-attr">height</span>: height1&#125; = obj;<br>       <span class="hljs-built_in">console</span>.log(name2, height1);<span class="hljs-comment">//张三 175cm</span><br></code></pre></td></tr></table></figure><ul><li>从data中结构出来goods对象下的name值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = &#123;<br>               id: <span class="hljs-number">1</span>,<br>               name: <span class="hljs-string">&#x27;家电&#x27;</span>,<br>               goods: &#123;<br>                   id: <span class="hljs-number">3</span>,<br>                   name: <span class="hljs-string">&#x27;TV&#x27;</span><br>               &#125;<br>           &#125;<br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">goods</span>: &#123;name,id&#125;&#125; = data;<br>       <span class="hljs-built_in">console</span>.log(name, id);<br></code></pre></td></tr></table></figure><h3 id="4、箭头函数"><a href="#4、箭头函数" class="headerlink" title="4、箭头函数"></a>4、箭头函数</h3><h4 id="4-1结构（极其简洁）"><a href="#4-1结构（极其简洁）" class="headerlink" title="4.1结构（极其简洁）"></a>4.1结构（极其简洁）</h4><p> () =&gt; {} ；</p><h4 id="4-2-箭头函数的特点"><a href="#4-2-箭头函数的特点" class="headerlink" title="4.2 箭头函数的特点"></a>4.2 箭头函数的特点</h4><ol><li><p>一般不会单独使用, 可以当做匿名函数进行赋值 \ 传参 \ 返回值</p></li><li><p>如果函数体只有一行代码，并代码执行结果就是返回值, 可以同时省略大括号和 return</p></li><li><p>如果形参只有一个, 可以省略小括号</p></li><li><p>内部没有 arguments 这个内置对象</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用箭头函数遍历数组</span><br>       <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>       <span class="hljs-comment">// 如果形参只有一个, 可以省略小括号</span><br>       arr1.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item))<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;----------------------&#x27;</span>);<br>       <span class="hljs-comment">// 筛选出数组中所有的偶数</span><br>       <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>       <span class="hljs-keyword">var</span> newArr = arr1.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>           <span class="hljs-built_in">console</span>.log(item);<br>           <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>;<br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><h4 id="4-3-箭头函数中this指向问题"><a href="#4-3-箭头函数中this指向问题" class="headerlink" title="4.3 箭头函数中this指向问题"></a>4.3 箭头函数中this指向问题</h4><p> (★★★) 箭头函数没有自己的 this, 它里面的 this 指向箭头函数所处位置的 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>           name: <span class="hljs-string">&#x27;张三&#x27;</span><br>       &#125;<br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//&#123;name:&#x27;张三&#x27;&#125;  this指向obj</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>) <span class="hljs-comment">//&#123;name:&#x27;张三&#x27;&#125;   this也指向obj</span><br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">const</span> resFn = fn.call(obj)<br>       resFn()<br></code></pre></td></tr></table></figure><h4 id="★★★-4-4this-情况讨论"><a href="#★★★-4-4this-情况讨论" class="headerlink" title="(★★★)4.4this 情况讨论"></a>(★★★)4.4this 情况讨论</h4><ul><li><p> (1) 非函数中的 this 指向 window</p></li><li><p>(2) es5 中函数的 this 指向函数的调用者</p></li><li><p>(3) call, apply, bind 这三种手动改变 this 的情况特殊对待, this 指向传递的第一个参数</p></li><li><p>(4) es6 中的箭头函数没有自己的 this, 指向所处位置的 this</p></li></ul><h3 id="5、剩余参数"><a href="#5、剩余参数" class="headerlink" title="5、剩余参数"></a>5、剩余参数</h3><h4 id="5-1-剩余参数语法-…变量名"><a href="#5-1-剩余参数语法-…变量名" class="headerlink" title="5.1 剩余参数语法(…变量名)"></a>5.1 剩余参数语法(…变量名)</h4><p>允许我们将剩下的所有参数表示为一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用来计算多个数的和 (1, 2, 3, 4, 5)</span><br>        <span class="hljs-keyword">const</span> getSum = <span class="hljs-function">(<span class="hljs-params">...rest</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(rest);<span class="hljs-comment">//[1, 25, 25, 49]</span><br>            <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>            rest.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> sum += item)<br>            <span class="hljs-built_in">console</span>.log(sum);<br>        &#125;<br>        getSum(<span class="hljs-number">1</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">49</span>)<span class="hljs-comment">//100</span><br></code></pre></td></tr></table></figure><h4 id="5-2剩余参数和解构配合使用"><a href="#5-2剩余参数和解构配合使用" class="headerlink" title="5.2剩余参数和解构配合使用"></a>5.2剩余参数和解构配合使用</h4><ul><li>把数组中剩下的元素组成新的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>]<br><span class="hljs-keyword">let</span> [a, b, ...c] = arr;<br>        <span class="hljs-built_in">console</span>.log(a, b);<span class="hljs-comment">//&#x27;red&#x27; &#x27;orange&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(c);<span class="hljs-comment">//[&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span><br></code></pre></td></tr></table></figure><ul><li><p>把对象剩下的属性组成一个新对象</p></li><li><p>使用剩余参数快速实现浅拷贝</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            age: <span class="hljs-number">12</span>,<br>            height: <span class="hljs-string">&#x27;170cm&#x27;</span>,<br>            weight: <span class="hljs-string">&#x27;135kg&#x27;</span>,<br>        &#125;<br><span class="hljs-keyword">let</span> &#123; ...obj2&#125; = obj;<br>        <span class="hljs-built_in">console</span>.log(obj2);<span class="hljs-comment">//&#123;name: &quot;小明&quot;, age: 12, height: &quot;170cm&quot;, weight: &quot;135kg&quot;&#125;</span><br><br>        obj2.name = <span class="hljs-string">&#x27;小李&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.log(obj2);<span class="hljs-comment">//&#123;name: &quot;小李&quot;, age: 12, height: &quot;170cm&quot;, weight: &quot;135kg&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="三、ES6-的内置对象扩展"><a href="#三、ES6-的内置对象扩展" class="headerlink" title="三、ES6 的内置对象扩展"></a>三、ES6 的内置对象扩展</h2><h3 id="1、-拓展运算符（展开语法-或-spred运算符）"><a href="#1、-拓展运算符（展开语法-或-spred运算符）" class="headerlink" title="1、 拓展运算符（展开语法 或 spred运算符）"></a>1、 拓展运算符（展开语法 或 spred运算符）</h3><p> …对象名 或 …数组名</p><ul><li><p>作用：把数组或对象转为用逗号分隔的参数形式</p></li><li><p>使用拓展运算符也可以快速完成浅拷贝</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = [...arr1];<br><span class="hljs-built_in">console</span>.log(arr2);<br></code></pre></td></tr></table></figure><h3 id="2、拓展运算符的应用"><a href="#2、拓展运算符的应用" class="headerlink" title="2、拓展运算符的应用"></a>2、拓展运算符的应用</h3><h4 id="2-1用来合并数组"><a href="#2-1用来合并数组" class="headerlink" title="2.1用来合并数组"></a>2.1用来合并数组</h4><ul><li>concat方法</li><li>push方法（直接将最后的合并结果赋值给前者）</li><li>直接利用拓展运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>        <span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>            <span class="hljs-comment">//concat方法</span><br>        <span class="hljs-keyword">const</span> res1 = arr1.concat(arr2);<br>        <span class="hljs-built_in">console</span>.log(res1);<br> <span class="hljs-comment">// push方法</span><br>        <span class="hljs-comment">// arr1.push(...arr2);</span><br>        <span class="hljs-comment">// console.log(arr1);</span><br> <span class="hljs-comment">// 直接利用拓展运算符</span><br>        <span class="hljs-keyword">const</span> res2 = [...arr1, ...arr2]<br>        <span class="hljs-built_in">console</span>.log(res2);<br></code></pre></td></tr></table></figure><h4 id="2-2求数组中的最大值"><a href="#2-2求数组中的最大值" class="headerlink" title="2.2求数组中的最大值"></a>2.2求数组中的最大值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr3 = [<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>       <span class="hljs-keyword">const</span> res3 = <span class="hljs-built_in">Math</span>.max(...arr3);<br>       <span class="hljs-built_in">console</span>.log(res3);<br></code></pre></td></tr></table></figure><h4 id="2-3拓展对象"><a href="#2-3拓展对象" class="headerlink" title="2.3拓展对象"></a>2.3拓展对象</h4><ul><li><p>拓展对象只能在｛｝中</p></li><li><p>合并两个对象，如果有相同的属性，直接后者值覆盖前者</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>           name: <span class="hljs-string">&#x27;Jhon&#x27;</span>,<br>           age: <span class="hljs-number">18</span>,<br>           color: <span class="hljs-string">&#x27;red&#x27;</span><br>       &#125;<br>       <span class="hljs-keyword">const</span> obj1 = &#123;<br>           weight: <span class="hljs-string">&#x27;120kg&#x27;</span>,<br>           height: <span class="hljs-number">180</span>,<br>           color: <span class="hljs-string">&#x27;blue&#x27;</span><br>       &#125;;<br> <span class="hljs-built_in">console</span>.log(&#123;...obj, ...obj1 &#125;); <span class="hljs-comment">//&#123;name: &quot;Jhon&quot;, age: 18, color: &quot;blue&quot;, weight: &quot;120kg&quot;, height: 180&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-4拓展字符串"><a href="#2-4拓展字符串" class="headerlink" title="2.4拓展字符串"></a>2.4拓展字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>       <span class="hljs-built_in">console</span>.log(...str);<span class="hljs-comment">//h e l l o</span><br></code></pre></td></tr></table></figure><h4 id="2-5使用拓展运算符拓展字符串和伪数组"><a href="#2-5使用拓展运算符拓展字符串和伪数组" class="headerlink" title="2.5使用拓展运算符拓展字符串和伪数组"></a>2.5使用拓展运算符拓展字符串和伪数组</h4><p>结果：为数组，也可以使用forEach进行遍历</p><h3 id="3、模板字符串"><a href="#3、模板字符串" class="headerlink" title="3、模板字符串"></a>3、模板字符串</h3><ul><li>ES6新增的创建字符串的方式，使用反引号定义</li><li>使用 ${变量名或表达式} 代替原来的 ‘引引加加’</li><li>模板字符串支持换行</li><li>在模板字符串中可以放任意的表达式 (如三元表达式, 函数调用, 逻辑运算符, +-*/…)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">const</span> foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;abc&#x27;</span>;<br>        <span class="hljs-keyword">let</span> str3 = <span class="hljs-string">`hello<span class="hljs-subst">$&#123;<span class="hljs-literal">false</span>?<span class="hljs-string">&#x27;abc&#x27;</span>:<span class="hljs-string">&#x27;ABC&#x27;</span>&#125;</span></span><br><span class="hljs-string"><span class="hljs-subst">$&#123;foo()&#125;</span>`</span>;<br>        <span class="hljs-built_in">console</span>.log(str3);<br></code></pre></td></tr></table></figure><h3 id="4、构造函数方法Array-from"><a href="#4、构造函数方法Array-from" class="headerlink" title="4、构造函数方法Array.from()"></a>4、构造函数方法Array.from()</h3><ul><li>将伪数组或可遍历对象转换为真正的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>            <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>            <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>            length: <span class="hljs-number">2</span><br>        &#125;<br>        <span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">Array</span>.from(obj);<br>        <span class="hljs-built_in">console</span>.log(arr);<span class="hljs-comment">//[&quot;a&quot;, &quot;b&quot;]</span><br></code></pre></td></tr></table></figure><ul><li> (了解)第二个可选参数 fn 用于对转化后的数组进行遍历修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = <span class="hljs-built_in">Array</span>.from(obj, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">//a b</span><br>            <span class="hljs-keyword">return</span> item + <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">//[&quot;a1&quot;,&quot;b1&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="4-1-实例方法：find"><a href="#4-1-实例方法：find" class="headerlink" title="4.1.实例方法：find()"></a>4.1.实例方法：find()</h4><ul><li>用于查找数组中符合条件的第一个元素</li><li>返回值: 找到就返回这个元素, 没有找到则返回 undefined</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">44</span>]<br>        <span class="hljs-comment">// 找出大于 10 的第一个元素</span><br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">8</span>)); <span class="hljs-comment">//2  返回的是查找的索引号</span><br><span class="hljs-keyword">const</span> res = arr.find(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt; <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h4 id="4-2-findIndex-方法"><a href="#4-2-findIndex-方法" class="headerlink" title="4.2 findIndex() 方法"></a>4.2 findIndex() 方法</h4><ul><li>用于查找数组中符合条件的第一个元素的索引</li><li>返回值: 找到就返回当前元素的所以, 没有找到始终返回 -1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br>       <span class="hljs-comment">// 找元素中大于 10 的元素索引</span><br>       <span class="hljs-keyword">const</span> res = arr.findIndex(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> item &gt; <span class="hljs-number">10</span>);<br>       <span class="hljs-built_in">console</span>.log(res); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><h4 id="4-3includes-固定值-方法"><a href="#4-3includes-固定值-方法" class="headerlink" title="4.3includes(固定值) 方法"></a>4.3includes(固定值) 方法</h4><ul><li>判断数组是否包含给定的值</li><li>返回值: 如果包含则返回 true，否则返回 false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">130</span>, <span class="hljs-number">44</span>]<br>       <span class="hljs-comment">// 判断数组中是否包含 44 这个元素</span><br>       <span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">44</span>)); <span class="hljs-comment">//true</span><br>       <span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">8</span>) !== -<span class="hljs-number">1</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong> 和其他查找方法的区别 ==&gt; includes 只能接受一个固定值，不能接受一个函数</p><h4 id="4-4map-方法"><a href="#4-4map-方法" class="headerlink" title="4.4map() 方法"></a>4.4map() 方法</h4><ul><li>基于原数组去创建一个新数组,不影响原数组</li><li>返回值: 新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>];<br><span class="hljs-keyword">const</span> res = arr2.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item / <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(res);<span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br><span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//[2, 4, 6, 8, 10]不影响原数组</span><br></code></pre></td></tr></table></figure><h4 id="4-5-startsWith-方法"><a href="#4-5-startsWith-方法" class="headerlink" title="4.5 startsWith() 方法"></a>4.5 startsWith() 方法</h4><p>判断字符串是否以某些字符开头，返回 Boolean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&#x27;hello&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="4-6-endsWith-方法："><a href="#4-6-endsWith-方法：" class="headerlink" title="4.6 endsWith() 方法："></a>4.6 endsWith() 方法：</h4><p>判断字符串是否以某些字符结尾，返回 Boolean</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;hello wrold&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;ld&#x27;</span>)); <br></code></pre></td></tr></table></figure><h4 id="4-7-repeat-n-方法"><a href="#4-7-repeat-n-方法" class="headerlink" title="4.7 repeat(n) 方法"></a>4.7 repeat(n) 方法</h4><p>用于将某个字符串重复 n 次, 返回重复后的新字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;123&#x27;</span><br>        str = str.repeat(<span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></table></figure><h3 id="5、Set-数据结构（★★）"><a href="#5、Set-数据结构（★★）" class="headerlink" title="5、Set 数据结构（★★）"></a>5、Set 数据结构（★★）</h3><p>它类似于数组，但<strong>所有的元素都是唯一的，没有重复值</strong></p><h4 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h4><p> new Set(数组)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br>       <span class="hljs-built_in">console</span>.log(set); <span class="hljs-comment">//所有的元素都是唯一的，没有重复值</span><br>       <span class="hljs-built_in">console</span>.log(set.size);<span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h4 id="5-2-实例方法"><a href="#5-2-实例方法" class="headerlink" title="5.2 实例方法"></a>5.2 实例方法</h4><ul><li>add(value)：添加某个值，返回 Set 结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li><li>clear()：清除所有成员，没有返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br> s.add(<span class="hljs-number">1</span>).add(<span class="hljs-number">2</span>).add(<span class="hljs-number">3</span>); <span class="hljs-comment">// 向 set 结构中添加值 </span><br> s.delete(<span class="hljs-number">2</span>)             <span class="hljs-comment">// 删除 set 结构中的2值 </span><br> s.has(<span class="hljs-number">1</span>)                <span class="hljs-comment">// 表示 set 结构中是否有1这个值 返回布尔值 </span><br> s.clear()               <span class="hljs-comment">// 清除 set 结构中的所有值</span><br> <span class="hljs-comment">//注意：删除的是元素的值，不是代表的索引</span><br></code></pre></td></tr></table></figure><ul><li>案例：利用 set 数据类型的不重复性进行数组去重</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">// 将数组转化为set类型</span><br>        <span class="hljs-keyword">const</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>(arr);<br>        <span class="hljs-built_in">console</span>.log([...set2]);<br></code></pre></td></tr></table></figure><h4 id="5-3总结-数组去重的方法"><a href="#5-3总结-数组去重的方法" class="headerlink" title="5.3总结: 数组去重的方法"></a>5.3<strong>总结: 数组去重的方法</strong></h4><p>​    （1） 建立一个新数组， 遍历数组， indexOf去判断元素是否存在</p><p>​     (2) filter(fn)</p><p>​     (3)原生for循环进行双重遍历，splice(i,1)</p><p>​    (4)[…new Set(arr)]</p><h4 id="5-3-遍历"><a href="#5-3-遍历" class="headerlink" title="5.3 遍历"></a>5.3 遍历</h4><ul><li>forEach() 方法遍历 set 数据中的每个元素</li><li>for…of 方法遍历任何可迭代的数据( Set, 数组, Map, 字符串)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> mySet = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]);<br><br>mySet.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(item));<br><br><br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> mySet) &#123;<br>            <span class="hljs-built_in">console</span>.log(item);<br>        &#125;<br><br></code></pre></td></tr></table></figure><p> <strong>注意:</strong> 对象不支持 for..of 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>           a: <span class="hljs-number">1</span>,<br>           b: <span class="hljs-number">2</span>,<br>           c: <span class="hljs-number">3</span><br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">Object</span>.keys(obj)) &#123;<br>           <span class="hljs-built_in">console</span>.log(item);<span class="hljs-comment">//a b c</span><br>           <span class="hljs-built_in">console</span>.log(obj[item]);<span class="hljs-comment">//1 2 3</span><br>       &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级第四天</title>
    <link href="/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC4%E5%A4%A9/"/>
    <url>/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC4%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第4天"><a href="#JS高级第4天" class="headerlink" title="JS高级第4天"></a>JS高级第4天</h1><h2 id="一、正则表达式概述"><a href="#一、正则表达式概述" class="headerlink" title="一、正则表达式概述"></a>一、正则表达式概述</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式，在数据类型中是属于对象</p><h3 id="2、作用"><a href="#2、作用" class="headerlink" title="2、作用"></a>2、作用</h3><p>正则表达式通常用来校验、查找、替换指定规则的字符文本</p><ul><li><p>验证表单，如：只能输入英文、字母、数字和下划线</p></li><li><p> 过滤页面内容中的敏感词汇，或者对指定字符组合进行替换 </p></li><li><p> 从字符串中提取我们想要的特定部分</p></li></ul><h3 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h3><ul><li>灵活性、逻辑性和功能性 （强大）</li><li>简单高效</li><li>可读性稍差，不便于记忆（一般复制相关的正则表达式，修改后即可使用）</li></ul><h2 id="二、正则表达式在js中的使用"><a href="#二、正则表达式在js中的使用" class="headerlink" title="二、正则表达式在js中的使用"></a>二、正则表达式在js中的使用</h2><h3 id="1、正则表达式的创建"><a href="#1、正则表达式的创建" class="headerlink" title="1、正则表达式的创建"></a>1、正则表达式的创建</h3><p>1.造函数方式 RegExp，创建正则表达式 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-regexp">/123/</span>);<br>        <span class="hljs-built_in">console</span>.log(reg);<br></code></pre></td></tr></table></figure><p>2.字面量方式创建正则表达式 /表达式/</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/123/</span>;<br></code></pre></td></tr></table></figure><h3 id="2、正则表达式的-test-方法"><a href="#2、正则表达式的-test-方法" class="headerlink" title="2、正则表达式的 test 方法"></a>2、正则表达式的 test 方法</h3><p>检测字符串是否符合正则表达式定义的规则，返回 true 或 false</p><ul><li>语法： reg.test(str)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/123/</span>;<br><span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;刺客123&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="三、正则表达式中的特殊字符"><a href="#三、正则表达式中的特殊字符" class="headerlink" title="三、正则表达式中的特殊字符"></a>三、正则表达式中的特殊字符</h2><h3 id="1、正则表达式的组成"><a href="#1、正则表达式的组成" class="headerlink" title="1、正则表达式的组成"></a>1、正则表达式的组成</h3><p> 一个正则表达式可以由简单的字符构成，比如 /123/, 也可以是简单和特殊字符的组合，比如：/^abc/</p><p>   其中，特殊字符又叫元字符，是在表达式中有特殊意义的字符，如 ^, $, . 等</p><p>特殊字符非常多，可以参考： </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></p><h3 id="2、边界符（位置符）"><a href="#2、边界符（位置符）" class="headerlink" title="2、边界符（位置符）"></a>2、边界符（位置符）</h3><p>主要用来匹配字符的开始和结束位置:</p><p>   (1) ^: 用来匹配以…开头</p><p>   (2) $: 用来匹配以…结尾</p><p>注意：</p><ul><li>不使用 ^ 和 $ 表示只要字符串中包含匹配的内容就返回 true, 可以多出其他任意字符</li><li> ^ 和 $ 在一起配合使用，表示是精确匹配, 不能多出其他字符也不能少 (必须满足数量和类型都一致)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^567/</span>; <span class="hljs-comment">//字符串中必须以567开头</span><br>     <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;刺客567&#x27;</span>)); <span class="hljs-comment">//false</span><br>     <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;561237&#x27;</span>)); <span class="hljs-comment">//false</span><br>     <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;567刺客&#x27;</span>)); <span class="hljs-comment">//true</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;-------------------------------&#x27;</span>);<br>     <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/ad$/</span>; <span class="hljs-comment">//字符串中必须以ad结尾</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;ADad&#x27;</span>)); <span class="hljs-comment">//true</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;adfgad&#x27;</span>)); <span class="hljs-comment">//true</span><br>     <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;afgd&#x27;</span>)); <span class="hljs-comment">//false</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;-------------------------------&#x27;</span>);<br>     <span class="hljs-keyword">var</span> reg3 = <span class="hljs-regexp">/^adc$/</span>; <span class="hljs-comment">//字符串中数量和类型必须符合adc</span><br>     <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;adc&#x27;</span>)); <span class="hljs-comment">//true</span><br>     <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;adcadc&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="3、字符类"><a href="#3、字符类" class="headerlink" title="3、字符类"></a>3、字符类</h3><h4 id="3-1、字符集合-如：-xyz"><a href="#3-1、字符集合-如：-xyz" class="headerlink" title="3.1、字符集合 如：[xyz]"></a>3.1、字符集合 如：[xyz]</h4><p>表示匹配字符集合中的任意字符，中括号中只要有任意一个字符出现在字符串就满足规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/[xyz]123/</span>; <span class="hljs-comment">//规则：只要包含x,y,z中任意一个再跟着123就满足条件</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;xy123&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;ad123&#x27;</span>)); <span class="hljs-comment">//false</span><br><br> <span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[adc]456$/</span>; <span class="hljs-comment">//精确匹配，字符的数量和类型都必须满足（数量：4，类型：a456,b456,c456）</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a456&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;b456&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;adc456&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="3-2中括号中的特殊字符自动转义"><a href="#3-2中括号中的特殊字符自动转义" class="headerlink" title="3.2中括号中的特殊字符自动转义"></a>3.2中括号中的特殊字符自动转义</h4><p>用破折号（-）来指定一个字符范围，如：[c-f1-3A-D]</p><p>注意:</p><ul><li> 对于点（.）和星号（*）这样的特殊符号中括号中自动转义为原本的意义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg3 = <span class="hljs-regexp">/^[c-f1-3A-D]$/</span>; <span class="hljs-comment">//精确匹配，只能是cdf123ABCD中的一个</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;asd&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;cdf&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;cdf123ABCD&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;c&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="3-3反向字符集合"><a href="#3-3反向字符集合" class="headerlink" title="3.3反向字符集合"></a>3.3反向字符集合</h4><p>表示匹配没有包含在字符集合中的字符，字符串中只要有一个不在中括号内的字符就满足规则 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^[^a-f]$/</span>; <span class="hljs-comment">//精准匹配（数量1，类型，不在小写a到f之间的其他字符）</span><br>       <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br>       <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;z&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="4、量词符"><a href="#4、量词符" class="headerlink" title="4、量词符"></a>4、量词符</h3><p>用来制定某个字符出现次数的特殊符号</p><h4 id="4-1"><a href="#4-1" class="headerlink" title="4.1 *"></a>4.1 *</h4><p>表示前面的字符出现 0 次或多次, 即可有可无(数量&gt;=0)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/^ab*c$/</span>; <span class="hljs-comment">//规则：字符串必须以a开头，b字符可有可无，后面一定跟着c</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="4-2"><a href="#4-2" class="headerlink" title="4.2 +"></a>4.2 +</h4><p>表示前面的字符至少出现 1 次或多次, 即至少出现一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg2 = <span class="hljs-regexp">/^ab+c$/</span>; <span class="hljs-comment">//规则：字符串必须以a开头，b字符至少出现一次，后面一定跟着c</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg2.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="4-3"><a href="#4-3" class="headerlink" title="4.3 ?"></a>4.3 ?</h4><p>表示前面的字符出现 0 次或 1 次, 要么不出现, 要么只出现 1 次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg3 = <span class="hljs-regexp">/^[0-9a-z]?$/</span>; <span class="hljs-comment">//规则：字符串必须以0-9或a-z开头，只能出现一次</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg3.test(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="4-4-3"><a href="#4-4-3" class="headerlink" title="4.4 {3}"></a>4.4 {3}</h4><p>表示前面的字符只能出现 3 次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg4 = <span class="hljs-regexp">/^[0-9a-z]&#123;3&#125;$/</span>; <span class="hljs-comment">//规则：字符串必须以0-9或a-z开头，只能出现3次</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg4.test(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="4-5-3"><a href="#4-5-3" class="headerlink" title="4.5 {3,}"></a>4.5 {3,}</h4><p>表示前面的字符出现 3 次 或 3次以上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg5 = <span class="hljs-regexp">/^[0-9a-z]&#123;3,&#125;$/</span>; <span class="hljs-comment">//规则：字符串必须以0-9或a-z开头，只能出现3次或三次以上</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//true</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//false</span><br>        <span class="hljs-built_in">console</span>.log(reg5.test(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="4-6-3-5"><a href="#4-6-3-5" class="headerlink" title="4.6 {3,5}"></a>4.6 {3,5}</h4><p>表示前面的字符出现 3 次 到 5 次以内</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg6 = <span class="hljs-regexp">/^[0-9a-z]&#123;3,5&#125;$/</span>; <span class="hljs-comment">//规则：字符串必须以0-9或a-z开头，只能出现3到5次</span><br>       <span class="hljs-comment">// 注意&#123;3,5&#125;之间不能有空格</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;abbcd&#x27;</span>)); <span class="hljs-comment">//true</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;abbcd123&#x27;</span>)); <span class="hljs-comment">//false</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;abbc&#x27;</span>)); <span class="hljs-comment">//true</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;ac&#x27;</span>)); <span class="hljs-comment">//false</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;aac&#x27;</span>)); <span class="hljs-comment">//true</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//false</span><br>       <span class="hljs-built_in">console</span>.log(reg6.test(<span class="hljs-string">&#x27;a&#x27;</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="5、-括号总结"><a href="#5、-括号总结" class="headerlink" title="5、 括号总结"></a>5、 括号总结</h3><ul><li>中括号 [xyz] 字符集合：匹配方括号中的任意字符</li><li> 大括号 {3,8} 量词符：表示重复的次数</li><li>小括号 (xyz): 表示一个整体</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^*(xyz)&#123;2&#125;$/</span>;<br>       <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;xyzxyz&#x27;</span>));<span class="hljs-comment">//true</span><br>       <span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;xyzxyzxyz&#x27;</span>));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="6、正则表达式中的预定义类"><a href="#6、正则表达式中的预定义类" class="headerlink" title="6、正则表达式中的预定义类"></a>6、正则表达式中的预定义类</h3><ul><li>\d：匹配 0~9 之间的任意一个数字，等价于 [0-9]</li><li>\D: 匹配所有 0~9 之外的字符，等价于 [^0-9]</li><li>\w: 匹配任意的字母、数字和下划线，等价于 [a-zA-Z0-9_]</li><li>\W: 匹配任意的字母、数字和下划线之外的字符，等价于 [^0-9a-zA-Z_]</li><li>\s: 匹配所有的空格（包括换行符，制表符，空格符等），等价于 [\t\r\n\v\f]</li><li> \S：匹配所有的非空格符，等价于 [^\t\r\n\v\f]</li><li> .也是正则中的一个特殊字符：（小数点）默认匹配除换行符之外的任何单个字符</li></ul><p>  <strong>记忆</strong>：所有大写字符表示 “非”, 上述预定义类只表示单个字符</p><h2 id="四、正则替换replace"><a href="#四、正则替换replace" class="headerlink" title="四、正则替换replace"></a>四、正则替换replace</h2><h3 id="1、replace"><a href="#1、replace" class="headerlink" title="1、replace"></a>1、replace</h3><p>replace(reg, 替换后的字符) 可以替换字符串中的字符，参数可以是普通字符串，也可以是正则表达式</p><h3 id="2、正则表达式参数-表达式-参数"><a href="#2、正则表达式参数-表达式-参数" class="headerlink" title="2、正则表达式参数 /表达式/参数"></a>2、正则表达式参数 /表达式/参数</h3><p>指定匹配的模式：</p><p>   （1）/表达式/g  全局匹配</p><p>   （2）/表达式/i  忽略大小写进行匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入留言&quot;</span>&gt;<br><span class="hljs-keyword">var</span> ipt = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;input&#x27;</span>);<br>ipt.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.value = <span class="hljs-built_in">this</span>.value.replace(<span class="hljs-regexp">/傻叉|傻\s*叉|sx/gi</span>, <span class="hljs-string">&#x27;**&#x27;</span>)<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="3、match-方法"><a href="#3、match-方法" class="headerlink" title="3、match 方法"></a>3、match 方法</h3><p>可以配合正则表达式, 从字符串中找出所有匹配正则的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3&#125;/g</span>;<br>        <span class="hljs-keyword">var</span> res = str.match(reg);<br>        <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级第一天</title>
    <link href="/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <url>/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第一天"><a href="#JS高级第一天" class="headerlink" title="JS高级第一天"></a>JS高级第一天</h1><h2 id="一、面向过程与面向对象"><a href="#一、面向过程与面向对象" class="headerlink" title="一、面向过程与面向对象"></a>一、面向过程与面向对象</h2><h3 id="1、面向过程"><a href="#1、面向过程" class="headerlink" title="1、面向过程"></a>1、面向过程</h3><ul><li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</li></ul><h3 id="2、面向对象"><a href="#2、面向对象" class="headerlink" title="2、面向对象"></a>2、面向对象</h3><ul><li>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</li></ul><h3 id="3、面向过程与面向对象对比"><a href="#3、面向过程与面向对象对比" class="headerlink" title="3、面向过程与面向对象对比"></a>3、面向过程与面向对象对比</h3><p> 面向对象：易于维护、拓展，耦合性低；适用场景：多人合作的复杂项目<br>  面向过程：不易于维护、拓展，耦合性高；适用场景：简单的功能模块</p><h2 id="二、对象和类"><a href="#二、对象和类" class="headerlink" title="二、对象和类"></a>二、对象和类</h2><h3 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h3><p>对象是由属性和方法组成的：是一个无序键值对的集合,指的是一个具体的事物</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用方法来表示（常用动词）</li></ul><h3 id="2、创建对象"><a href="#2、创建对象" class="headerlink" title="2、创建对象"></a>2、创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字面量创建对象</span><br><span class="hljs-keyword">var</span> ldh = &#123;<br>    name: <span class="hljs-string">&#x27;刘德华&#x27;</span>,<br>    age: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(ldh);<span class="hljs-comment">//&#123;name:&quot;刘德华&quot;,age:18&#125;</span><br><br><span class="hljs-comment">//构造函数创建对象</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br> &#125;<br><span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>)<span class="hljs-comment">//实例化对象</span><br><span class="hljs-built_in">console</span>.log(ldh);<span class="hljs-comment">//Star&#123;name:&quot;刘德华&quot;,age:18&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3、类"><a href="#3、类" class="headerlink" title="3、类"></a>3、类</h3><p>类 (泛指一类事物)：比如运动员，把公共的特征提取出来，封装在一个模板中（姓名，年龄，身高，特长…）</p><p>类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</p><h3 id="4、创建类"><a href="#4、创建类" class="headerlink" title="4、创建类"></a>4、创建类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 创建类 class  创建一个 明星类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Star</span> </span>&#123;<br>  <span class="hljs-comment">// 类的共有属性放到 constructor 里面</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.name = name;<br>  <span class="hljs-built_in">this</span>.age = age;<br>  &#125;<br>&#125;<br>  <span class="hljs-comment">// 2. 利用类创建对象 new</span><br>  <span class="hljs-keyword">var</span> ldh = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;刘德华&#x27;</span>, <span class="hljs-number">18</span>);<br>  <span class="hljs-built_in">console</span>.log(ldh);<span class="hljs-comment">//Star&#123;name:&quot;刘德华&quot;,age:18&#125;</span><br></code></pre></td></tr></table></figure><p>运行结果和使用构造函数方式一样</p><p>注意要点 :</p><ol><li>class 创建的类首字母还是要大写</li><li>类中的 constructor 构造函数, 接收 new 创建对象传递的参数，并返回实例对象（return this） </li><li>new 一个类时，自动调用构造函数方法，但不会自动调用类方法</li><li>类中的构造函数 和 类方法不需要加 function （重点） </li><li>多个类方法之间不需要使用逗号隔开 (重点) </li></ol><h3 id="5、大括号总结"><a href="#5、大括号总结" class="headerlink" title="5、大括号总结"></a>5、大括号总结</h3><ul><li>函数体 fn () {} </li><li>定义对象 var obj = {} </li><li>条件语法 if () {} </li><li>定义一个类 class 类名 {}</li></ul><h3 id="6、类的继承"><a href="#6、类的继承" class="headerlink" title="6、类的继承"></a>6、类的继承</h3><ul><li><p>定义一个类（子类）通过 extends 继承父类上的方法和属性</p><p>​    class 子类名 extends 父类 {}</p></li><li><p>super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>           <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, sex</span>)</span> &#123;<br>               <span class="hljs-built_in">this</span>.name = name;<br>               <span class="hljs-built_in">this</span>.age = age;<br>               <span class="hljs-built_in">this</span>.sex = sex;<br>           &#125;;<br>           <span class="hljs-function"><span class="hljs-title">buy</span>(<span class="hljs-params">phone</span>)</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;买了部&#x27;</span> + phone);<br>           &#125;;<br>           <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>           &#125;;<br>       &#125;;<br>       <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">People</span> </span>&#123;<br>           <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name, age, sex</span>)</span> &#123;<br>               <span class="hljs-comment">// 构造函数中要想使用this， 必须调用super（） 函数， 可以直接把参数传给父亲；</span><br>               <span class="hljs-built_in">super</span>(name, age, sex);<br>           &#125;;<br>           <span class="hljs-comment">// 子类方法</span><br>           <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span> &#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span>);<br>           &#125;;<br>           <span class="hljs-comment">// 子类方法</span><br>           <span class="hljs-function"><span class="hljs-title">intro</span>(<span class="hljs-params"></span>)</span> &#123;<br>               <span class="hljs-comment">// super的第二个方法，可以直接去调用父类上的方法</span><br>               <span class="hljs-built_in">super</span>.say(); <span class="hljs-comment">//hello</span><br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好，我是&#x27;</span> + <span class="hljs-built_in">this</span>.name);<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>       <span class="hljs-built_in">console</span>.log(xm);<br>       <span class="hljs-comment">// 如果子类中有和父类中同名的方法，就近使用子类的方法</span><br>       xm.say(); <span class="hljs-comment">//你好</span><br>       xm.intro();<br></code></pre></td></tr></table></figure><p>  <strong>注意：</strong></p><p>​    （1）子类调用方法时的查找顺序：先从子类上找再从父类上找</p><p>​    （2）super 作为一个函数，可以调用父类的构造函数；作为一个对象，可以调用父类的方法</p><p><strong>子类中注意的两点：</strong></p><p>​      1. 子类中使用 this 之前，必须要先调用 super</p><ol start="2"><li>子类可以拓展自己的属性和方法</li></ol><h3 id="7、使用类的两个注意事项"><a href="#7、使用类的两个注意事项" class="headerlink" title="7、使用类的两个注意事项"></a>7、使用类的两个注意事项</h3><p>​    1. 声明 class 类不存在变量提升，先定义再使用</p><ol start="2"><li>在类中访问属性和方法，必须加 this</li></ol><h3 id="8、JS基础this的常见指向问题；"><a href="#8、JS基础this的常见指向问题；" class="headerlink" title="8、JS基础this的常见指向问题；"></a>8、JS基础this的常见指向问题；</h3><ul><li>非函数作用域中的指向：始终指向window；</li><li>函数作用域中的指向：函数的调用者（不关心函数的定义）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级第三天</title>
    <link href="/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
    <url>/2021/02/04/JS%E9%AB%98%E7%BA%A7%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS高级第三天"><a href="#JS高级第三天" class="headerlink" title="JS高级第三天"></a>JS高级第三天</h1><h2 id="一、函数的定义和调用"><a href="#一、函数的定义和调用" class="headerlink" title="一、函数的定义和调用"></a>一、函数的定义和调用</h2><h3 id="1、函数的定义方式"><a href="#1、函数的定义方式" class="headerlink" title="1、函数的定义方式"></a>1、函数的定义方式</h3><ul><li><p>函数的定义方法： </p><p>​      1. 函数声明</p><p>​      2. 函数表达式</p><p>​      3. 利用 Function 构造函数  </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  1. 函数声明</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;;<br>        <span class="hljs-comment">//   2. 函数表达式</span><br>        <span class="hljs-keyword">var</span> fn1 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>);<br>        &#125;;<br>        <span class="hljs-comment">//   3. 利用 Function 构造函数</span><br>        <span class="hljs-keyword">var</span> fn2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;console.log(a+b)&#x27;</span>);<br>        fn2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">console</span>.dir(fn2);<br></code></pre></td></tr></table></figure><h3 id="2、函数调用"><a href="#2、函数调用" class="headerlink" title="2、函数调用"></a>2、函数调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 普通函数</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);<br>       &#125;<br>       fn1();<br>       <span class="hljs-comment">//   2. 对象中的函数调用</span><br>       <span class="hljs-keyword">var</span> obj = &#123;<br>           say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>           &#125;<br>       &#125;;<br>       obj.say();<br>       <span class="hljs-comment">//   3. 构造函数的调用</span><br>       <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>           <span class="hljs-built_in">this</span>.name = name;<br>           <span class="hljs-built_in">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>);<br>       <span class="hljs-built_in">console</span>.log(xm);<br>       <span class="hljs-comment">//   4. 绑定事件的处理函数</span><br>       <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;点击了&#x27;</span>);<br>       &#125;);<br>       <span class="hljs-comment">//   5. 定时器的处理函数 </span><br>       <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;345&#x27;</span>);<br>       &#125;, <span class="hljs-number">1000</span>);<br>       <span class="hljs-comment">//   6. 立即执行函数</span><br>       <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>       !(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-comment">// 提供了一个局部作用域，和外界的不冲突</span><br>           <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>       &#125;)()<br></code></pre></td></tr></table></figure><h2 id="二、this指向"><a href="#二、this指向" class="headerlink" title="二、this指向"></a>二、this指向</h2><h3 id="1、函数内部this指向"><a href="#1、函数内部this指向" class="headerlink" title="1、函数内部this指向"></a>1、函数内部this指向</h3><ul><li>普通函数                   指向window</li><li>对象中的函数调用       指向调用者</li><li>构造函数的调用           指向实例对象</li><li>绑定事件的处理函数   指向绑定者</li><li>定时器的处理函数       指向window</li><li>立即执行函数                指向window</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;hello&lt;/div&gt;<br>    &lt;button&gt;点击&lt;/button&gt;<br>    &lt;script&gt;<br>        <span class="hljs-comment">// 1. 普通函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//window</span><br>        &#125;<br>        fn1();<br>        <span class="hljs-comment">//   2. 对象中的函数调用</span><br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>            &#125;<br>        &#125;;<br>        obj.say(); <span class="hljs-comment">//this 指向obj</span><br>        <span class="hljs-keyword">var</span> foo = obj.say;<br>        foo(); <span class="hljs-comment">//this指向window</span><br>        <span class="hljs-comment">//   3. 构造函数的调用</span><br>        <span class="hljs-keyword">var</span> that;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            that = <span class="hljs-built_in">this</span>;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-built_in">console</span>.log(xm);<br>        <span class="hljs-built_in">console</span>.log(xm === that);<br>        <span class="hljs-comment">//   4. 绑定事件的处理函数</span><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;点击了&#x27;</span>);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//指向btn</span><br>        &#125;);<br>        <span class="hljs-comment">//   5. 定时器的处理函数 </span><br>        <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//指向window</span><br>        &#125;, <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">//   6. 立即执行函数</span><br>        <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>        !(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//指向window</span><br>        &#125;)()<br></code></pre></td></tr></table></figure><h3 id="2、call改变this指向"><a href="#2、call改变this指向" class="headerlink" title="2、call改变this指向"></a>2、call改变this指向</h3><ul><li>fn.call([thisArg, arg1, arg2…])</li><li>作用：调用一个函数，并指定调用时 this 的值</li><li>参数: thisArg 函数中 this 的指定值； arg1, arg2…可选的参数列表</li><li>返回值：函数调用的结果</li></ul><p><strong>注意</strong>：第一个参数 thisArg 如果不传或是 null、undefined，默认函数内 this 指向 window </p><h3 id="3、apply-方法"><a href="#3、apply-方法" class="headerlink" title="3、apply 方法"></a>3、apply 方法</h3><ul><li>fn.apply(thisArg,[ argsArray])</li><li>作用：调用一个函数，并指定调用时 this 的值</li><li>参数: thisArg 函数中 this 的指定值； argsArray 可选的参数数组(!!)</li><li>返回值：函数调用的结果</li></ul><p><strong>和call方法区别</strong>：</p><ul><li>call方法从第二个传递的是每个独立参数，而apply传递的是参数数组</li><li>在可以使用 call 的情况下， 都可以使用 apply 替代 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-built_in">console</span>.log(a, b);<br>        &#125;<br>        fn.call(&#123;&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>        fn.apply(&#123;&#125;, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br><br>        <span class="hljs-comment">// 1、使用apply去判断一组数的最大值</span><br>        <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">254</span>, <span class="hljs-number">545</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-literal">null</span>, arr);<br>        <span class="hljs-built_in">console</span>.log(res);<br></code></pre></td></tr></table></figure><h3 id="4、-bind方法"><a href="#4、-bind方法" class="headerlink" title="4、 bind方法"></a>4、 bind方法</h3><ul><li>var newFn = fn.bind(thisArg,arg1, arg2, …)</li><li>作用：基于原函数创建一个新函数，这个新函数的 this 被指定为第一个参数， 其余参数作为实参传递给新函数</li><li>参数：thisArg 是新函数内 this 的预设值; arg1, arg2 是新函数预设传入的参数</li><li>返回值: 新函数（本身不会调用函数）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>           <span class="hljs-built_in">console</span>.log(a + b);<br>       &#125;<br>       <span class="hljs-comment">// bind创建一个函数,并且可以为新函数预先指定传入实参</span><br>       <span class="hljs-keyword">var</span> newFn = fn.bind(&#123;&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br>       newFn(); <span class="hljs-comment">//新函数中的this已经被修改为｛｝，并且传入新的参数没用，bind已经预设了</span><br>       fn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">//原函数中的this 让然指向window</span><br></code></pre></td></tr></table></figure><h2 id="三、严格模式"><a href="#三、严格模式" class="headerlink" title="三、严格模式"></a>三、严格模式</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p> 采用具有限制性JavaScript变体的一种方式，摆脱了以前的松散模式</p><p>​      1. 消除了 js 代码的不合理和不严谨地方，减少怪异行为</p><p>​      2. 消除了代码的不安全地方，保证代码安全运行</p><p>​      3. 提高编译器的效率，增加运行的速度</p><p>​    4.禁用 ECMAScript 未来版本中可能会定义的一些语法 class extends super 等</p><ul><li>使用：在scrip代码块最前面添加’use strict’;</li></ul><h3 id="2、严格模式的变化"><a href="#2、严格模式的变化" class="headerlink" title="2、严格模式的变化"></a>2、严格模式的变化</h3><ul><li>变量未声明不能直接赋值</li><li>变量必须先声明再使用</li><li>函数内的 this 默认指向 undefined</li><li>非函数内的 this 默认指向 undefined</li><li>构造函数和类只能加 new 进行使用</li><li>函数中的参数名不能重名 </li><li>不允许在非函数的代码块内声明函数 (chrome 浏览器没有实现)</li></ul><h2 id="四、高阶函数"><a href="#四、高阶函数" class="headerlink" title="四、高阶函数"></a>四、高阶函数</h2><p>对其他函数进行操作的函数，主要有两种类型的高阶函数：</p><p>​      1. 把函数作为参数的函数</p><ol start="2"><li>把函数作为返回值的函数 </li></ol><h2 id="五、闭包"><a href="#五、闭包" class="headerlink" title="五、闭包"></a>五、闭包</h2><h3 id="1、定义："><a href="#1、定义：" class="headerlink" title="1、定义："></a>1、定义：</h3><p>内部函数访问外部函数声明的变量，这种组合方式就是闭包</p><h3 id="2、JS-中的垃圾回收机制-GC"><a href="#2、JS-中的垃圾回收机制-GC" class="headerlink" title="2、JS 中的垃圾回收机制(GC)"></a>2、JS 中的垃圾回收机制(GC)</h3><p>  垃圾回收机制会定期（周期性）找出那些不再引用到的内存（变量），然后释放其内存</p><h3 id="3、闭包产生的原因"><a href="#3、闭包产生的原因" class="headerlink" title="3、闭包产生的原因"></a>3、闭包产生的原因</h3><p>(1) 当一个函数内的声明的变量没有被其他函数引用时，那么调用完这个函数后，所有的局部变量就会被垃圾回收机制清除；</p><p>​     (2) 一旦这个变量被另外一个函数所引用，这个变量的值会始终保存在内存中，不会被垃圾回收机制回收，从而形成了闭包 </p><h3 id="4、案例："><a href="#4、案例：" class="headerlink" title="4、案例："></a>4、案例：</h3><ul><li>需求: 点击每个按钮弹出当前按钮的索引</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button&gt;按钮&lt;/button&gt;<br>   &lt;button&gt;按钮&lt;/button&gt;<br>   &lt;button&gt;按钮&lt;/button&gt;<br>   &lt;button&gt;按钮&lt;/button&gt;<br>   &lt;button&gt;按钮&lt;/button&gt;<br><br>   &lt;script&gt;<br>       <span class="hljs-comment">// 闭包的应用: 在异步任务中使用同步任务下的变量  </span><br>       <span class="hljs-comment">// 需求: 点击每个按钮弹出当前按钮的索引</span><br>       <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>           btns[i].index = i;<br>           btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>               <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.index);<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">// 闭包应用</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.length; i++) &#123;<br>           <span class="hljs-comment">// 使用立即执行函数去构建闭包，叫做小闭包</span><br>           (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>&#123;<br>               <span class="hljs-comment">// 注意：这里的i就是我们在闭包中去保存的变量，保存了五份</span><br>               btns[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                   <span class="hljs-built_in">console</span>.log(i);<br>               &#125;<br>           &#125;)(i)<br>       &#125;<br></code></pre></td></tr></table></figure><ul><li>计算打车的价格 </li></ul><p>打车起步价 8（3公里内），之后每多一公里增加 5 块钱，用户输入公里数就可以得出打车价格,如果有拥堵的情况，在之前价格的基础上再多收取 10 块钱拥堵费 </p><p>封装一个求正常时打车价格 和 拥挤时打车价格的对象, 并全局中不能访问到起步价和总价 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> total = <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">var</span> start = <span class="hljs-number">8</span>;<br>           <span class="hljs-keyword">return</span> &#123;<br>               price: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">km</span>) </span>&#123;<br>                   total = km &lt;= <span class="hljs-number">3</span> ? start : (km - <span class="hljs-number">3</span>) * <span class="hljs-number">5</span> + start;<br>                   <span class="hljs-keyword">return</span> total;<br>               &#125;,<br>               busyPrice: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">isBusy</span>) </span>&#123;<br>                   total = isBusy ? total + <span class="hljs-number">10</span> : total;<br>                   <span class="hljs-keyword">return</span> total;<br>               &#125;<br>           &#125;<br>       &#125;)()<br>       <span class="hljs-built_in">console</span>.log(obj.price(<span class="hljs-number">20</span>));<br>       <span class="hljs-built_in">console</span>.log(obj.busyPrice(<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><h2 id="六、递归函数"><a href="#六、递归函数" class="headerlink" title="六、递归函数"></a>六、递归函数</h2><ul><li>函数内部自己调用自己，作用和循环效果类似 </li><li>递归很容易发生 “栈溢出” 错误，所以和 while 循环类似必须要添加中断条件 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//求 n 到 m 两个数之间的阶乘   5, 10 ===&gt; 5 * 6 * ... * 10</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params">n, m</span>) </span>&#123;<br>           <span class="hljs-keyword">if</span> (n == m) &#123;<br>               <span class="hljs-keyword">return</span> m;<br>           &#125;<br>           <span class="hljs-keyword">return</span> n * fn2(n + <span class="hljs-number">1</span>, m);<br>       &#125;<br>       <span class="hljs-keyword">var</span> res2 = fn2(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>       <span class="hljs-built_in">console</span>.log(res2);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 利用递归函数求斐波那契数列（兔子序列） 1, 1, 2, 3, 5, 8, 13, 21...</span><br><span class="hljs-comment">// 用户输入一个数字 n 就可以求出这个数字对应的斐波那契数列值  </span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">n</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> fn(n - <span class="hljs-number">1</span>) + fn(n - <span class="hljs-number">2</span>);<br>            <span class="hljs-comment">// return n==0||n==1?n:fn(n - 1) + fn(n - 2);</span><br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(fn(<span class="hljs-number">4</span>));<br>        <span class="hljs-comment">//fn(3)+fn(2)==&gt;fn(2)+fn(1)+fn(2)==&gt;fn(1)+fn(0)+fn(1)+fn(2)==&gt;fn(1)+fn(0)+fn(1)+fn(1)+fn(0)==&gt;1+0+1+1+0=3</span><br></code></pre></td></tr></table></figure><h2 id="七、拷贝"><a href="#七、拷贝" class="headerlink" title="七、拷贝"></a>七、拷贝</h2><p>简单数据类型都是直接拷贝，不区分深浅拷贝</p><h3 id="1、浅拷贝"><a href="#1、浅拷贝" class="headerlink" title="1、浅拷贝"></a>1、浅拷贝</h3><p>只拷贝对象一层的数据，复杂数据类型只拷贝内存地址值（引用同一个对象）</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            id: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            data: &#123;<br>                id: <span class="hljs-number">2</span>,<br>                age: <span class="hljs-number">19</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> obj2 = &#123;&#125;;<br>        <span class="hljs-comment">// obj2 = obj;</span><br>        <span class="hljs-comment">// 遍历原对象</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-comment">// obj2对象中添加属性</span><br>            obj2[key] = obj[key]<br>        &#125;<br>        obj.data.id = <span class="hljs-number">10</span>; <span class="hljs-comment">//修改原对象data属性下的id值，obj2中的id也会改变</span><br>        <span class="hljs-comment">//这里的data属性值是相同的内存地址</span><br>        <span class="hljs-built_in">console</span>.log(obj2.data.id);<br></code></pre></td></tr></table></figure><h3 id="2、深拷贝"><a href="#2、深拷贝" class="headerlink" title="2、深拷贝"></a>2、深拷贝</h3><ul><li>拷贝对象多层的数据，遇到复杂数据类型会继续新建一个空间，拷贝里面每一层的属性和值 </li></ul><ul><li>和浅拷贝的区别 <ul><li>深拷贝后的对象和原对象是完全隔离的，各自互不影响， 而浅拷贝中所有复杂数据类型的值，都是共同引用的</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>            id: <span class="hljs-number">1</span>,<br>            name: <span class="hljs-string">&#x27;小明&#x27;</span>,<br>            data: &#123;<br>                id: <span class="hljs-number">2</span>,<br>                age: <span class="hljs-number">19</span>,<br>                goods: &#123;<br>                    id: <span class="hljs-number">10</span><br>                &#125;<br>            &#125;,<br>            arr: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>        &#125;<br>        <span class="hljs-keyword">var</span> obj2 = &#123;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">obj1, obj2</span>) </span>&#123;<br>            <span class="hljs-comment">// 遍历数组</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj1) &#123;<br>                <span class="hljs-keyword">var</span> temp = obj1[key];<br><br>                <span class="hljs-comment">// 分三种情况讨论</span><br>                <span class="hljs-comment">// 数组==&gt;在obj2中新建数组，再去拷贝</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(temp)) &#123;<br>                    obj2[key] = [];<br>                    deepClone(temp, obj2[key]);<br>                    <span class="hljs-comment">// 对象==&gt;在obj2中新建对象,再去拷贝</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) &#123;<br>                    obj2 = &#123;&#125;;<br>                    deepClone(temp, obj2[key]);<br>                    <span class="hljs-comment">// 简单数据类型，直接拷贝到obj2中</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    obj2[key] = temp;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        deepClone(obj1, obj2);<br><br>        obj1.data.id = <span class="hljs-number">10</span>;<br>        obj1.arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br><br>        <span class="hljs-comment">// obj2 中的所有数据和obj1中的所有数据完全隔离， 互不影响</span><br>        <span class="hljs-built_in">console</span>.log(obj2.data.id);<br>        <span class="hljs-built_in">console</span>.log(obj2.arr[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h3 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h3><ul><li>浅拷贝快速实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>           a: <span class="hljs-number">1</span>,<br>           b: <span class="hljs-number">2</span>,<br>           c: &#123;<br>               d: <span class="hljs-number">4</span><br>           &#125;<br>       &#125;<br>       obj.c.d = <span class="hljs-number">10</span>;<br>       <span class="hljs-keyword">var</span> newObj = &#123;...obj<br>       &#125;;<br>       <span class="hljs-built_in">console</span>.log(newObj);<br><br></code></pre></td></tr></table></figure><ul><li>深拷贝快速实现</li><li>JSON.parse(JSON.stringify(obj))</li><li>JSON.stringify()可以把复杂数据类型转成字符串</li><li>JSON.parse()可以把字符串再转成对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj2 = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj))<br>       obj.c.d = <span class="hljs-number">20</span>;<br>       <span class="hljs-built_in">console</span>.log(obj2); <span class="hljs-comment">//obj2中的属性值不会产生影响</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS高级第二天</title>
    <link href="/2021/02/04/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%AC2%E5%A4%A9/"/>
    <url>/2021/02/04/JavaScript%E9%AB%98%E7%BA%A7%E7%AC%AC2%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript高级第2天"><a href="#JavaScript高级第2天" class="headerlink" title="JavaScript高级第2天"></a>JavaScript高级第2天</h1><h2 id="一、构造函数和原型"><a href="#一、构造函数和原型" class="headerlink" title="一、构造函数和原型"></a>一、构造函数和原型</h2><h3 id="1、对象的三种创建方式"><a href="#1、对象的三种创建方式" class="headerlink" title="1、对象的三种创建方式"></a>1、对象的三种创建方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用构造函数创建对象</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age, sex</span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>            <span class="hljs-built_in">this</span>.sex = sex;<br>            <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(a);<br>        <span class="hljs-comment">// 字面量</span><br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;小敏&#x27;</span>,<br>            age: <span class="hljs-number">12</span><br>        &#125;;<br>        <span class="hljs-comment">// new Object()</span><br>        <span class="hljs-keyword">var</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>        obj2.name = <span class="hljs-string">&#x27;小红&#x27;</span>;<br>        obj2[<span class="hljs-string">&#x27;age&#x27;</span>] = <span class="hljs-number">12</span>;<br>        <span class="hljs-built_in">console</span>.log(obj2);<br></code></pre></td></tr></table></figure><h3 id="2、静态成员和实例成员"><a href="#2、静态成员和实例成员" class="headerlink" title="2、静态成员和实例成员"></a>2、静态成员和实例成员</h3><ul><li>静态成员：给构造函数添加的属性或方法， 只能通过构造函数本身才能访问的属性或方法</li><li>实例成员：只能通过实例对象才能访问的属性或方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">uname, age, sex</span>) </span>&#123;<br>          <span class="hljs-built_in">this</span>.uname = uname;<br>          <span class="hljs-built_in">this</span>.age = age;<br>          <span class="hljs-built_in">this</span>.sex = sex;<br>          <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>              <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">13</span>, <span class="hljs-string">&#x27;男&#x27;</span>);<br>      <span class="hljs-comment">// 1. 实例成员: 只能通过实例对象才能访问的属性或方法</span><br>      <span class="hljs-built_in">console</span>.log(a.uname);<br>      <span class="hljs-built_in">console</span>.log(People.uname); <span class="hljs-comment">//undefined ,原因是uname不在People内</span><br>      <span class="hljs-comment">// 2. 静态成员:给构造函数添加的属性或方法， 只能通过构造函数本身才能访问的属性或方法</span><br>      People.height = <span class="hljs-string">&#x27;height&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.log(a.height); <span class="hljs-comment">//undefined ,原因是height不在a内</span><br>      <span class="hljs-built_in">console</span>.log(People.height);<br></code></pre></td></tr></table></figure><h3 id="3、构造函数模型"><a href="#3、构造函数模型" class="headerlink" title="3、构造函数模型"></a>3、构造函数模型</h3><ul><li><p>构造函数中直接添加方法的缺点</p><p>每次创建对象，要重复开辟内存空间，浪费资源 </p></li><li><p>构造函数的原型 prototype</p><p><strong>每个函数默认都有一个 propotype 属性, 它的值默认是一个对象</strong></p><p>在 prototype 对象上的方法和属性, 会被 new 构造函数() 创建出来的实例对象所继承</p></li><li><p>注意:</p><p>​      (1) 只要是函数就默认有 prototype 属性, 但非函数的对象是不具有的</p><p>​      (2) 定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>           <span class="hljs-built_in">this</span>.uname = name;<br>           <span class="hljs-built_in">this</span>.age = age;<br>       &#125;<br>       <span class="hljs-comment">// 每个函数默认都有一个 propotype 属性, 它的值默认是一个对象</span><br>       Student.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;哈哈哈哈&#x27;</span>);<br>       &#125;<br>       Student.prototype.study = <span class="hljs-string">&#x27;学习JS&#x27;</span>;<br>       <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>);<br>       <span class="hljs-comment">// 在prototype上添加的方法或属性会被所有的实例对象继承</span><br>       <span class="hljs-built_in">console</span>.log(xm.study);<br>       xm.sing();<br>       <span class="hljs-keyword">var</span> obj = &#123;<br>           a: <span class="hljs-number">1</span><br>       &#125;;<br>       <span class="hljs-comment">// console.log(obj.prototype); //非函数没有此属性</span><br></code></pre></td></tr></table></figure><h3 id="4、对象模型"><a href="#4、对象模型" class="headerlink" title="4、对象模型"></a>4、对象模型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">对象的原型<br>    每个对象都默认有一个 __proto__的属性, 它的值是一个对象, 默认指向创建这个对象的构造函数的原型<br><br>对象原型的访问特点<br>     每个对象访问__proto__下的所有属性和方法，可以省略__proto__<br><br>对象上读取属性的顺序<br>      先从自身的属性上进行查找，如果没有再去__proto__属性指向的对象上去查找<br><br></code></pre></td></tr></table></figure><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\JS高级\JS高级第二天\images\img4.png" alt="img4"></p><h3 id="5、constructor构造函数"><a href="#5、constructor构造函数" class="headerlink" title="5、constructor构造函数"></a>5、constructor构造函数</h3><ul><li>对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor 属性 ，constructor 我们称为构造函数，因为它指回构造函数本身。</li><li>constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来的构造函数。</li><li>当我们重新建立一个对象去覆盖原先的prototype时，constuctor属性需要我们手动赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Star</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.uname = uname;<br>     <span class="hljs-built_in">this</span>.age = age;<br> &#125;<br> <span class="hljs-comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span><br> Star.prototype = &#123;<br> <span class="hljs-comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span><br>   <span class="hljs-title">constructor</span>: <span class="hljs-title">Star</span>, // 手动设置指回原来的构造函数<br>   <span class="hljs-title">sing</span>: <span class="hljs-title">function</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会唱歌&#x27;</span>);<br>   &#125;,<br>   movie: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我会演电影&#x27;</span>);<br>   &#125;<br>&#125;<br><span class="hljs-keyword">var</span> zxy = <span class="hljs-keyword">new</span> Star(<span class="hljs-string">&#x27;张学友&#x27;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-built_in">console</span>.log(zxy)<br></code></pre></td></tr></table></figure><h3 id="6、原型链"><a href="#6、原型链" class="headerlink" title="6、原型链"></a>6、原型链</h3><p>每一个实例对象又有一个__proto__属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有__proto__属性，这样一层一层往上找就形成了原型链。</p><p><img src="E:\黑马培训\前端基础\案例练习\就业班\笔记\JS高级\JS高级第二天\images\img5.png" alt="img5"></p><h3 id="原型链理解（面试常问）"><a href="#原型链理解（面试常问）" class="headerlink" title="原型链理解（面试常问）"></a><strong>原型链理解（面试常问）</strong></h3><p>  每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向创建它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。</p><h3 id="7、原型链和成员的查找机制"><a href="#7、原型链和成员的查找机制" class="headerlink" title="7、原型链和成员的查找机制"></a>7、原型链和成员的查找机制</h3><p>对象访问属性时遵从原型链的顺序</p><p>​    (1) 当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>​    (2) 如果没有找到就从它的原型对象（__proto__）中查找</p><p>​    (3) 如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><h3 id="8、原型对象中this指向"><a href="#8、原型对象中this指向" class="headerlink" title="8、原型对象中this指向"></a>8、原型对象中this指向</h3><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 非函数中this指向window</span><br>        <span class="hljs-comment">// 函数中this指向函数调用者</span><br>        <span class="hljs-keyword">var</span> that;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">uname, age</span>) </span>&#123;<br>            <span class="hljs-comment">// 函数中的 this 默认指向函数的调用者</span><br>            <span class="hljs-built_in">this</span>.uname = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-comment">// 每个函数默认都有一个 propotype 属性, 它的值默认是一个对象</span><br>        Student.prototype.sing = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            that = <span class="hljs-built_in">this</span>;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;哈哈哈哈&#x27;</span>);<br>        &#125;<br>        Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span> === Student.prototype);<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;去睡觉&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>);<br>        xm.sing();<br>        <span class="hljs-built_in">console</span>.log(that === xm);<br><br>        <span class="hljs-comment">// sing 中this指向调用者Student.prototype</span><br>        Student.prototype.sleep();<br></code></pre></td></tr></table></figure><h3 id="9、原型链的应用：拓展内置对象上自定义方法"><a href="#9、原型链的应用：拓展内置对象上自定义方法" class="headerlink" title="9、原型链的应用：拓展内置对象上自定义方法"></a>9、原型链的应用：拓展内置对象上自定义方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>        <span class="hljs-built_in">console</span>.log(arr.__proto__ === <span class="hljs-built_in">Array</span>.prototype);<br>        arr.push(<span class="hljs-number">4</span>);<br><br>        <span class="hljs-comment">// 1. 需求：修改数组 Array 上的原型对象，添加自定义求和的方法</span><br>        <span class="hljs-built_in">Array</span>.prototype.getSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//指向arr=[1,2,3,4]</span><br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>                sum += <span class="hljs-built_in">this</span>[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(arr.getSum());<br></code></pre></td></tr></table></figure><p> 拓展原型对象上的方法时，不能直接覆盖原来的原型对象，只能添加或和修改方法 注意：内置对象（如：Object, Array, Function） 上的原型对象不允许进行覆盖，只允许修改</p><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="1、call"><a href="#1、call" class="headerlink" title="1、call()"></a>1、call()</h3><ul><li>使用：fn.call([thisArg, arg1, arg2…])</li><li>作用：调用一个函数，并指定调用时 this 的值</li><li>参数: thisArg 函数中 this 的指定值； arg1, arg2…可选的参数列表</li><li>返回值：函数调用的结果</li><li>注意：第一个参数 thisArg 如果不传或是 null、undefined，默认函数内 this 指向 window </li></ul><h3 id="2、子构造函数继承父构造函数中的属性"><a href="#2、子构造函数继承父构造函数中的属性" class="headerlink" title="2、子构造函数继承父构造函数中的属性"></a>2、子构造函数继承父构造函数中的属性</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子类继承父类属性的核心: 使用 call() 把父类的实例对象 this 手动修改为子类的实例对象 this</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向父类创建的实例对象 </span><br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>            <span class="hljs-comment">// this指向子类创建的实例对象</span><br>            People.call(<span class="hljs-built_in">this</span>, name, age);<br>        &#125;<br>        <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>);<br>        <span class="hljs-built_in">console</span>.log(xm);<br></code></pre></td></tr></table></figure><h3 id="3、借用原型对象继承方法"><a href="#3、借用原型对象继承方法" class="headerlink" title="3、借用原型对象继承方法"></a>3、借用原型对象继承方法</h3><ol><li>先定义一个父构造函数</li><li>再定义一个子构造函数</li><li>子构造函数继承父构造函数的属性(使用call方法)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  子类继承父类上方法的核心: 新建一个对象作为子类的原型对象, 并把这个对象的原型指向父类的 prototype</span><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//this指向父类创建的实例对象 </span><br>          <span class="hljs-built_in">this</span>.name = name;<br>          <span class="hljs-built_in">this</span>.age = age;<br>      &#125;;<br>      People.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>      &#125;;<br><br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">name, age, subject</span>) </span>&#123;<br>          <span class="hljs-comment">// this指向子类创建的实例对象</span><br>          People.call(<span class="hljs-built_in">this</span>, name, age);<br>          <span class="hljs-built_in">this</span>.subject = subject;<br>      &#125;;<br>      <span class="hljs-comment">// 三种方法可以调用父类方法：</span><br>      <span class="hljs-comment">// (1)直接把父构造函数的原型拿过来用,但是会导致子类添加的方法，父类也会有</span><br>      Student.prototype = People.prototype;<br><br>      <span class="hljs-comment">// 2） 不能把两个原型放在一个空间， 需要创建一个新的内存空间</span><br>      <span class="hljs-keyword">var</span> obj = &#123;<br>          <span class="hljs-title">constructor</span>: <span class="hljs-title">Student</span>, //把<span class="hljs-title">constructor</span>指向子构造函数<br>          <span class="hljs-title">__proto__</span>: <span class="hljs-title">People</span>.<span class="hljs-title">prototype</span>, //通过原型链，把父构造函数的原型直接拿过来；<br>      &#125;<br>      <span class="hljs-title">Student</span>.<span class="hljs-title">prototype</span> = <span class="hljs-title">obj</span>;<br><br>      <span class="hljs-comment">// (3)实例化父级的构造函数</span><br>      Student.prototype = <span class="hljs-keyword">new</span> People();<br>      Student.prototype.constructor = Student;<br><br>      <span class="hljs-comment">// 子类构造函数原型上添加新的方法</span><br>      Student.prototype.sleep = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;去睡觉啊&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;语文&#x27;</span>);<br>      xm.say(); <span class="hljs-comment">//xm直接访问父构造函数原型上的方法；</span><br>      <span class="hljs-built_in">console</span>.log(xm);<br>      <span class="hljs-built_in">console</span>.log(People.prototype); <span class="hljs-comment">//检测父构造函数上的原型是否被子构造函数修改</span><br>      <span class="hljs-built_in">console</span>.log(xm.constructor); <span class="hljs-comment">//检测xm是谁创建出来的</span><br></code></pre></td></tr></table></figure><h3 id="4、类的本质"><a href="#4、类的本质" class="headerlink" title="4、类的本质"></a>4、类的本质</h3><ol><li>构造函数默认有一个 prototype 属性, 它的值是一个对象</li><li>构造函数 prototype 属性下有 constructor 和 <strong>proto</strong> 两个默认的属性</li><li>构造函数可以通过在 prototype 上添加方法, 去实现所有实例继承</li><li>构造函数创建的实例上 __proto__指向创建它构造函数的 prototype</li><li>class 类的本质其实就是一个改造版的构造函数</li></ol><h2 id="三、ES5新增数组方法"><a href="#三、ES5新增数组方法" class="headerlink" title="三、ES5新增数组方法"></a>三、ES5新增数组方法</h2><h3 id="1、数组方法forEach遍历数组"><a href="#1、数组方法forEach遍历数组" class="headerlink" title="1、数组方法forEach遍历数组"></a>1、数组方法forEach遍历数组</h3><ul><li>参数：callback(元素, 索引, 数组本身)</li><li>返回值：无</li><li>例子: 使用 forEach 对数组求和</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">55</span>, <span class="hljs-number">13</span>]<br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;索引号：&#x27;</span> + index + <span class="hljs-string">&#x27;===&gt;&#x27;</span> + <span class="hljs-string">&#x27;数组元素:&#x27;</span> + item);<br>        &#125;)<br></code></pre></td></tr></table></figure><h3 id="2、filter-方法从数组筛选出符合条件的所有元素"><a href="#2、filter-方法从数组筛选出符合条件的所有元素" class="headerlink" title="2、filter() 方法从数组筛选出符合条件的所有元素"></a>2、filter() 方法从数组筛选出符合条件的所有元素</h3><ul><li>参数：callback(元素, 索引, 数组本身)</li><li>返回值：新数组</li><li>例子: 使用 filter 筛选数组中所有偶数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> newArr = arr2.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>) </span>&#123;<br>      <span class="hljs-comment">// 如果return后面的结果为真，就返回到新数组中</span><br><span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(newArr);<br></code></pre></td></tr></table></figure><h3 id="3、some-方法用于查找数组中是否有符合条件的某一个元素"><a href="#3、some-方法用于查找数组中是否有符合条件的某一个元素" class="headerlink" title="3、some() 方法用于查找数组中是否有符合条件的某一个元素"></a>3、some() 方法用于查找数组中是否有符合条件的某一个元素</h3><ul><li>参数：callback(元素, 索引, 数组本身)</li><li> 返回值：true(找到) || false(找不到)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>      <span class="hljs-keyword">var</span> a = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>)</span>&#123;<br>           <span class="hljs-keyword">return</span> item == <span class="hljs-string">&#x27;&#x27;</span>;<br>       &#125;)<br>       <span class="hljs-built_in">console</span>.log(a);<br></code></pre></td></tr></table></figure><h3 id="4、-every-方法用于查找数组中是否所有的元素都符合条件"><a href="#4、-every-方法用于查找数组中是否所有的元素都符合条件" class="headerlink" title="4、 every() 方法用于查找数组中是否所有的元素都符合条件"></a>4、 every() 方法用于查找数组中是否所有的元素都符合条件</h3><ul><li>参数：callback(元素, 索引, 数组本身)</li><li>返回值：true || false (只要有一个不满足就返回 false)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>];<br>        <span class="hljs-keyword">var</span> b = arr3.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">20</span>;<br>        &#125;)<br>        <span class="hljs-built_in">console</span>.log(b);<br>        <span class="hljs-comment">// 这些方法本质上都是存在原型上 Array.prototype;</span><br>        <span class="hljs-built_in">console</span>.log(arr3.__proto__ === <span class="hljs-built_in">Array</span>.prototype); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="5、trim方法去除字符串两端的空格"><a href="#5、trim方法去除字符串两端的空格" class="headerlink" title="5、trim方法去除字符串两端的空格"></a>5、trim方法去除字符串两端的空格</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;   hello   &#x27;</span><br><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//hello 去除两端空格</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;   he l l o   &#x27;</span><br><span class="hljs-built_in">console</span>.log(str.trim()）  <span class="hljs-comment">//he l l o  去除两端空格</span><br></code></pre></td></tr></table></figure><h3 id="6、获取对象的属性名"><a href="#6、获取对象的属性名" class="headerlink" title="6、获取对象的属性名"></a>6、获取对象的属性名</h3><p>Object.keys(对象) 获取到当前对象中的属性名 </p><ul><li>返回值是所有属性名组成的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>          a: <span class="hljs-number">1</span>,<br>          b: <span class="hljs-number">2</span>,<br>          c: <span class="hljs-number">3</span><br>      &#125;;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>          <span class="hljs-built_in">console</span>.log(obj[key]);<br>      &#125;<br>      <span class="hljs-comment">// 1. 使用 Object.keys() 方法获取对象上所有的属性名</span><br>      <span class="hljs-comment">// 返回值：所有属性名组成的数组</span><br>      <span class="hljs-keyword">var</span> res = <span class="hljs-built_in">Object</span>.keys(obj);<br>      <span class="hljs-built_in">console</span>.log(res);<br><br>      <span class="hljs-comment">// 2. 新遍历对象的方法</span><br>      res.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>          <span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">//获取的是属性名</span><br>          <span class="hljs-built_in">console</span>.log(obj[item]); <span class="hljs-comment">//获取属姓名对应的值，注意都是变量，要用[]</span><br>      &#125;)<br></code></pre></td></tr></table></figure><h3 id="7、Object-defineProperty-方法"><a href="#7、Object-defineProperty-方法" class="headerlink" title="7、Object.defineProperty() 方法"></a>7、Object.defineProperty() 方法</h3><ul><li><p>作用：在对象上定义一个新属性，或者修改原属性，并返回对象</p></li><li><p>使用方法：</p><p>Object.defineProperty(obj, prop, descriptor)</p><p>​      (1) obj: 要定义属性的对象</p><p>​      (2) prop: 要定义或修改的属性的名称, 字符串 ‘name’</p><p>​      (3) descriptor: 要定义或修改的属性描述符, 数据格式是对象 {}</p></li><li><p>属性的描述符：</p><p>(1) value: 属性值 </p><p>(2) writable: 是否可以修改</p><p>(3) enumerable: 是否可以枚举（遍历到）</p><p>(4) configurable: 是否可以删除或再次修改特性</p><p>​      三个属性描述符默认都是 false</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            name: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            age: <span class="hljs-string">&#x27;12&#x27;</span>,<br>            gender: <span class="hljs-string">&#x27;man&#x27;</span><br>        &#125;<br>        <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&#x27;height&#x27;</span>, &#123;<br>            value: <span class="hljs-string">&#x27;170&#x27;</span>,<br>            writable: <span class="hljs-literal">true</span>, <span class="hljs-comment">//属性可以修改</span><br>            enumerable: <span class="hljs-literal">true</span>, <span class="hljs-comment">//可以遍历到</span><br>            configurable: <span class="hljs-literal">true</span> <span class="hljs-comment">//可以再次修改</span><br>        &#125;)<br>        obj.height = <span class="hljs-string">&#x27;175&#x27;</span>;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.keys(obj));<br>        <span class="hljs-comment">// 删除属性  delete；</span><br>        <span class="hljs-keyword">delete</span> obj.height;<br>        <span class="hljs-built_in">console</span>.log(obj.height);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS高级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
